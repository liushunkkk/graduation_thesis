// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.19.4
// source: v1/tx.proto

package txpb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/jzero-io/desc/proto/third_party/jzero/api"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Empty 空对象
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_tx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_v1_tx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_v1_tx_proto_rawDescGZIP(), []int{0}
}

type RefundData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Type    uint32   `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Txs     []string `protobuf:"bytes,3,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (x *RefundData) Reset() {
	*x = RefundData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_tx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundData) ProtoMessage() {}

func (x *RefundData) ProtoReflect() protoreflect.Message {
	mi := &file_v1_tx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundData.ProtoReflect.Descriptor instead.
func (*RefundData) Descriptor() ([]byte, []int) {
	return file_v1_tx_proto_rawDescGZIP(), []int{1}
}

func (x *RefundData) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RefundData) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RefundData) GetTxs() []string {
	if x != nil {
		return x.Txs
	}
	return nil
}

type BundleSaveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId    string        `protobuf:"bytes,1,opt,name=chain_id,proto3" json:"chain_id,omitempty"`
	RpcId      string        `protobuf:"bytes,2,opt,name=rpc_id,proto3" json:"rpc_id,omitempty"`
	OriginHash string        `protobuf:"bytes,3,opt,name=origin_hash,proto3" json:"origin_hash,omitempty"`
	BundleHash string        `protobuf:"bytes,4,opt,name=bundle_hash,proto3" json:"bundle_hash,omitempty"`
	RefundData []*RefundData `protobuf:"bytes,5,rep,name=refund_data,proto3" json:"refund_data,omitempty"`
}

func (x *BundleSaveRequest) Reset() {
	*x = BundleSaveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_tx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BundleSaveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleSaveRequest) ProtoMessage() {}

func (x *BundleSaveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_tx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleSaveRequest.ProtoReflect.Descriptor instead.
func (*BundleSaveRequest) Descriptor() ([]byte, []int) {
	return file_v1_tx_proto_rawDescGZIP(), []int{2}
}

func (x *BundleSaveRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *BundleSaveRequest) GetRpcId() string {
	if x != nil {
		return x.RpcId
	}
	return ""
}

func (x *BundleSaveRequest) GetOriginHash() string {
	if x != nil {
		return x.OriginHash
	}
	return ""
}

func (x *BundleSaveRequest) GetBundleHash() string {
	if x != nil {
		return x.BundleHash
	}
	return ""
}

func (x *BundleSaveRequest) GetRefundData() []*RefundData {
	if x != nil {
		return x.RefundData
	}
	return nil
}

// PageRequest 分页请求
type PageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页大小
	PageSize int64 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 页码
	PageNum int64 `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
}

func (x *PageRequest) Reset() {
	*x = PageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_tx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageRequest) ProtoMessage() {}

func (x *PageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_tx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageRequest.ProtoReflect.Descriptor instead.
func (*PageRequest) Descriptor() ([]byte, []int) {
	return file_v1_tx_proto_rawDescGZIP(), []int{3}
}

func (x *PageRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PageRequest) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

type TxListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       *PageRequest `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	ChainId    string       `protobuf:"bytes,2,opt,name=chain_id,proto3" json:"chain_id,omitempty"`
	StartTime  string       `protobuf:"bytes,3,opt,name=start_time,proto3" json:"start_time,omitempty"`
	EndTime    string       `protobuf:"bytes,4,opt,name=end_time,proto3" json:"end_time,omitempty"`
	OriginHash string       `protobuf:"bytes,5,opt,name=origin_hash,proto3" json:"origin_hash,omitempty"`
}

func (x *TxListRequest) Reset() {
	*x = TxListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_tx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxListRequest) ProtoMessage() {}

func (x *TxListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_tx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxListRequest.ProtoReflect.Descriptor instead.
func (*TxListRequest) Descriptor() ([]byte, []int) {
	return file_v1_tx_proto_rawDescGZIP(), []int{4}
}

func (x *TxListRequest) GetPage() *PageRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *TxListRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *TxListRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *TxListRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *TxListRequest) GetOriginHash() string {
	if x != nil {
		return x.OriginHash
	}
	return ""
}

type TxListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*TxResponse `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TxListResponse) Reset() {
	*x = TxListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_tx_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxListResponse) ProtoMessage() {}

func (x *TxListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_tx_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxListResponse.ProtoReflect.Descriptor instead.
func (*TxListResponse) Descriptor() ([]byte, []int) {
	return file_v1_tx_proto_rawDescGZIP(), []int{5}
}

func (x *TxListResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TxListResponse) GetData() []*TxResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

// TxResponse 交易信息
type TxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash      string `protobuf:"bytes,1,opt,name=tx_hash,proto3" json:"tx_hash,omitempty"`
	Status      string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	BlockNumber string `protobuf:"bytes,3,opt,name=block_number,proto3" json:"block_number,omitempty"`
	GasUsed     string `protobuf:"bytes,4,opt,name=gas_used,proto3" json:"gas_used,omitempty"`
	GasPrice    string `protobuf:"bytes,5,opt,name=gas_price,proto3" json:"gas_price,omitempty"`
	TranFee     string `protobuf:"bytes,6,opt,name=tran_fee,proto3" json:"tran_fee,omitempty"`
	TxTime      string `protobuf:"bytes,7,opt,name=tx_time,proto3" json:"tx_time,omitempty"`
}

func (x *TxResponse) Reset() {
	*x = TxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_tx_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxResponse) ProtoMessage() {}

func (x *TxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_tx_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxResponse.ProtoReflect.Descriptor instead.
func (*TxResponse) Descriptor() ([]byte, []int) {
	return file_v1_tx_proto_rawDescGZIP(), []int{6}
}

func (x *TxResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *TxResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TxResponse) GetBlockNumber() string {
	if x != nil {
		return x.BlockNumber
	}
	return ""
}

func (x *TxResponse) GetGasUsed() string {
	if x != nil {
		return x.GasUsed
	}
	return ""
}

func (x *TxResponse) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *TxResponse) GetTranFee() string {
	if x != nil {
		return x.TranFee
	}
	return ""
}

func (x *TxResponse) GetTxTime() string {
	if x != nil {
		return x.TxTime
	}
	return ""
}

// RefundResponse 返利信息
type RefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash      string `protobuf:"bytes,1,opt,name=tx_hash,proto3" json:"tx_hash,omitempty"`
	BlockNumber string `protobuf:"bytes,3,opt,name=block_number,proto3" json:"block_number,omitempty"`
	Value       string `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	TxTime      string `protobuf:"bytes,7,opt,name=tx_time,proto3" json:"tx_time,omitempty"`
}

func (x *RefundResponse) Reset() {
	*x = RefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_tx_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundResponse) ProtoMessage() {}

func (x *RefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_tx_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundResponse.ProtoReflect.Descriptor instead.
func (*RefundResponse) Descriptor() ([]byte, []int) {
	return file_v1_tx_proto_rawDescGZIP(), []int{7}
}

func (x *RefundResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *RefundResponse) GetBlockNumber() string {
	if x != nil {
		return x.BlockNumber
	}
	return ""
}

func (x *RefundResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *RefundResponse) GetTxTime() string {
	if x != nil {
		return x.TxTime
	}
	return ""
}

// RefundListResponse 返利列表
type RefundListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*RefundResponse `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *RefundListResponse) Reset() {
	*x = RefundListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_tx_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundListResponse) ProtoMessage() {}

func (x *RefundListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_tx_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundListResponse.ProtoReflect.Descriptor instead.
func (*RefundListResponse) Descriptor() ([]byte, []int) {
	return file_v1_tx_proto_rawDescGZIP(), []int{8}
}

func (x *RefundListResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RefundListResponse) GetData() []*RefundResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

// TxCountRequest 交易信息统计
type TxCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId string `protobuf:"bytes,1,opt,name=chain_id,proto3" json:"chain_id,omitempty"`
}

func (x *TxCountRequest) Reset() {
	*x = TxCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_tx_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxCountRequest) ProtoMessage() {}

func (x *TxCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_tx_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxCountRequest.ProtoReflect.Descriptor instead.
func (*TxCountRequest) Descriptor() ([]byte, []int) {
	return file_v1_tx_proto_rawDescGZIP(), []int{9}
}

func (x *TxCountRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

// TxCountResponse 交易信息统计
type TxCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Success int64 `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Fail    int64 `protobuf:"varint,3,opt,name=fail,proto3" json:"fail,omitempty"`
	Revert  int64 `protobuf:"varint,4,opt,name=revert,proto3" json:"revert,omitempty"`
}

func (x *TxCountResponse) Reset() {
	*x = TxCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_tx_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxCountResponse) ProtoMessage() {}

func (x *TxCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_tx_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxCountResponse.ProtoReflect.Descriptor instead.
func (*TxCountResponse) Descriptor() ([]byte, []int) {
	return file_v1_tx_proto_rawDescGZIP(), []int{10}
}

func (x *TxCountResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TxCountResponse) GetSuccess() int64 {
	if x != nil {
		return x.Success
	}
	return 0
}

func (x *TxCountResponse) GetFail() int64 {
	if x != nil {
		return x.Fail
	}
	return 0
}

func (x *TxCountResponse) GetRevert() int64 {
	if x != nil {
		return x.Revert
	}
	return 0
}

// TxTrendRequest 交易趋势统计
type TxTrendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId   string `protobuf:"bytes,2,opt,name=chain_id,proto3" json:"chain_id,omitempty"`
	StartTime string `protobuf:"bytes,3,opt,name=start_time,proto3" json:"start_time,omitempty"`
	EndTime   string `protobuf:"bytes,4,opt,name=end_time,proto3" json:"end_time,omitempty"`
}

func (x *TxTrendRequest) Reset() {
	*x = TxTrendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_tx_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxTrendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxTrendRequest) ProtoMessage() {}

func (x *TxTrendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_tx_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxTrendRequest.ProtoReflect.Descriptor instead.
func (*TxTrendRequest) Descriptor() ([]byte, []int) {
	return file_v1_tx_proto_rawDescGZIP(), []int{11}
}

func (x *TxTrendRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *TxTrendRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *TxTrendRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

// TxTrendResponse 交易趋势统计
type TxTrendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TxTrendData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TxTrendResponse) Reset() {
	*x = TxTrendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_tx_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxTrendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxTrendResponse) ProtoMessage() {}

func (x *TxTrendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_tx_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxTrendResponse.ProtoReflect.Descriptor instead.
func (*TxTrendResponse) Descriptor() ([]byte, []int) {
	return file_v1_tx_proto_rawDescGZIP(), []int{12}
}

func (x *TxTrendResponse) GetData() []*TxTrendData {
	if x != nil {
		return x.Data
	}
	return nil
}

// TxTrendData 交易趋势统计数据
type TxTrendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountTime string `protobuf:"bytes,1,opt,name=count_time,proto3" json:"count_time,omitempty"`
	Success   int64  `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Fail      int64  `protobuf:"varint,3,opt,name=fail,proto3" json:"fail,omitempty"`
	Revert    int64  `protobuf:"varint,4,opt,name=revert,proto3" json:"revert,omitempty"`
	Total     int64  `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *TxTrendData) Reset() {
	*x = TxTrendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_tx_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxTrendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxTrendData) ProtoMessage() {}

func (x *TxTrendData) ProtoReflect() protoreflect.Message {
	mi := &file_v1_tx_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxTrendData.ProtoReflect.Descriptor instead.
func (*TxTrendData) Descriptor() ([]byte, []int) {
	return file_v1_tx_proto_rawDescGZIP(), []int{13}
}

func (x *TxTrendData) GetCountTime() string {
	if x != nil {
		return x.CountTime
	}
	return ""
}

func (x *TxTrendData) GetSuccess() int64 {
	if x != nil {
		return x.Success
	}
	return 0
}

func (x *TxTrendData) GetFail() int64 {
	if x != nil {
		return x.Fail
	}
	return 0
}

func (x *TxTrendData) GetRevert() int64 {
	if x != nil {
		return x.Revert
	}
	return 0
}

func (x *TxTrendData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// RefundCountResponse 返利统计
type RefundCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total  int64  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *RefundCountResponse) Reset() {
	*x = RefundCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_tx_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundCountResponse) ProtoMessage() {}

func (x *RefundCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_tx_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundCountResponse.ProtoReflect.Descriptor instead.
func (*RefundCountResponse) Descriptor() ([]byte, []int) {
	return file_v1_tx_proto_rawDescGZIP(), []int{14}
}

func (x *RefundCountResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RefundCountResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// RefundTrendResponse 返利趋势统计
type RefundTrendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*RefundTrendData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *RefundTrendResponse) Reset() {
	*x = RefundTrendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_tx_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundTrendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundTrendResponse) ProtoMessage() {}

func (x *RefundTrendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_tx_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundTrendResponse.ProtoReflect.Descriptor instead.
func (*RefundTrendResponse) Descriptor() ([]byte, []int) {
	return file_v1_tx_proto_rawDescGZIP(), []int{15}
}

func (x *RefundTrendResponse) GetData() []*RefundTrendData {
	if x != nil {
		return x.Data
	}
	return nil
}

// RefundTrendData 返利趋势统计数据
type RefundTrendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountTime string `protobuf:"bytes,1,opt,name=count_time,proto3" json:"count_time,omitempty"`
	Total     int64  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Amount    string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *RefundTrendData) Reset() {
	*x = RefundTrendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_tx_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundTrendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundTrendData) ProtoMessage() {}

func (x *RefundTrendData) ProtoReflect() protoreflect.Message {
	mi := &file_v1_tx_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundTrendData.ProtoReflect.Descriptor instead.
func (*RefundTrendData) Descriptor() ([]byte, []int) {
	return file_v1_tx_proto_rawDescGZIP(), []int{16}
}

func (x *RefundTrendData) GetCountTime() string {
	if x != nil {
		return x.CountTime
	}
	return ""
}

func (x *RefundTrendData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RefundTrendData) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// DoCountRequest 统计请求
type DoCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime string `protobuf:"bytes,3,opt,name=start_time,proto3" json:"start_time,omitempty"`
	EndTime   string `protobuf:"bytes,4,opt,name=end_time,proto3" json:"end_time,omitempty"`
}

func (x *DoCountRequest) Reset() {
	*x = DoCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_tx_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoCountRequest) ProtoMessage() {}

func (x *DoCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_tx_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoCountRequest.ProtoReflect.Descriptor instead.
func (*DoCountRequest) Descriptor() ([]byte, []int) {
	return file_v1_tx_proto_rawDescGZIP(), []int{17}
}

func (x *DoCountRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *DoCountRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

var File_v1_tx_proto protoreflect.FileDescriptor

var file_v1_tx_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x76, 0x31, 0x2f, 0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x74,
	0x78, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x67, 0x72, 0x70, 0x63,
	0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6a, 0x7a, 0x65, 0x72, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6a,
	0x7a, 0x65, 0x72, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x7a, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xc8, 0x01, 0x0a,
	0x0a, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41,
	0x08, 0x32, 0x06, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x2a,
	0x18, 0x2a, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x48, 0x92, 0x41, 0x3a, 0x32, 0x38,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x20, 0x31, 0x3a, 0xe8, 0xbf, 0x94, 0xe5, 0x88, 0xa9, 0x54,
	0x6f, 0x43, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0x20, 0x32, 0x3a, 0xe8, 0xbf, 0x94, 0xe5, 0x88,
	0xa9, 0x54, 0x6f, 0x53, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0x20, 0x33, 0x3a, 0x62, 0x72, 0x69,
	0x62, 0x65, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x30, 0x01, 0x30,
	0x02, 0x30, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x74, 0x78, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0xe4, 0xba, 0xa4,
	0xe6, 0x98, 0x93, 0xe5, 0x93, 0x88, 0xe5, 0xb8, 0x8c, 0x73, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02,
	0x08, 0x01, 0x52, 0x03, 0x74, 0x78, 0x73, 0x22, 0x8e, 0x03, 0x0a, 0x11, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1e, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0xe5, 0x8c, 0xba, 0xe5, 0x9d, 0x97, 0xe9, 0x93, 0xbe, 0x69,
	0x64, 0xfa, 0x42, 0x0b, 0x72, 0x09, 0x10, 0x01, 0x52, 0x01, 0x31, 0x52, 0x02, 0x35, 0x36, 0x52,
	0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x59, 0x0a, 0x06, 0x72, 0x70, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x37, 0x32, 0x35,
	0xe5, 0x8e, 0x9f, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0x20,
	0x2c, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x75, 0x72, 0x6c, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0x3a, 0x30, 0xe4, 0xb8, 0xba, 0x43, 0xe7, 0xab, 0xaf, 0x2c, 0x75, 0x69, 0x6e, 0x74, 0xe4, 0xb8,
	0xba, 0x42, 0xe7, 0xab, 0xaf, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x72, 0x70,
	0x63, 0x5f, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x15, 0x32, 0x13,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe7, 0x9a, 0x84, 0x68,
	0x61, 0x73, 0x68, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x42, 0x18, 0x42, 0x52, 0x0b, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x41, 0x0a, 0x0b, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0x92, 0x41, 0x13, 0x32, 0x11, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x20, 0x68, 0x61, 0x73, 0x68, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x42, 0x18, 0x42, 0x52,
	0x0b, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x5a, 0x0a, 0x0b,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x74, 0x78, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x26, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe8, 0xbf, 0x94, 0xe5, 0x88, 0xa9,
	0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe7, 0x9a, 0x84, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x03, 0x92, 0x01, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5c, 0x0a, 0x0b, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x22,
	0x04, 0x18, 0x0a, 0x28, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x25, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x22, 0x05, 0x18, 0xe8, 0x07, 0x28, 0x01, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0xa0, 0x02, 0x0a, 0x0d, 0x54, 0x78, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x78, 0x70, 0x62, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x3a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1e, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0xe5, 0x8c, 0xba, 0xe5, 0x9d, 0x97, 0xe9, 0x93,
	0xbe, 0x69, 0x64, 0xfa, 0x42, 0x0b, 0x72, 0x09, 0x10, 0x01, 0x52, 0x01, 0x31, 0x52, 0x02, 0x35,
	0x36, 0x52, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe5, 0xbc, 0x80, 0xe5,
	0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe4, 0xba, 0xa4,
	0xe6, 0x98, 0x93, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0x92, 0x41, 0x12, 0x32, 0x10, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xba, 0xa4, 0xe6, 0x98,
	0x93, 0x68, 0x61, 0x73, 0x68, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x42, 0x52, 0x0b, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x22, 0x59, 0x0a, 0x0e, 0x54, 0x78, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32,
	0x06, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74,
	0x78, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xc6, 0x02, 0x0a, 0x0a, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0xe4, 0xba, 0xa4, 0xe6, 0x98,
	0x93, 0x68, 0x61, 0x73, 0x68, 0x52, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x23,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0x92, 0x41, 0x08, 0x32, 0x06, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe5, 0x8c, 0xba, 0xe5, 0x9d, 0x97, 0xe9, 0xab, 0x98, 0xe5, 0xba, 0xa6, 0x52, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x08, 0x67, 0x61,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41,
	0x0b, 0x32, 0x09, 0x67, 0x61, 0x73, 0xe6, 0xb6, 0x88, 0xe8, 0x80, 0x97, 0x52, 0x08, 0x67, 0x61,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09,
	0x67, 0x61, 0x73, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x52, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe4, 0xba, 0xa4,
	0xe6, 0x98, 0x93, 0xe8, 0xb4, 0xb9, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x66, 0x65, 0x65,
	0x12, 0x2b, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc8, 0x01,
	0x0a, 0x0e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0x68, 0x61,
	0x73, 0x68, 0x52, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x35, 0x0a, 0x0c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x8c, 0xba, 0xe5, 0x9d, 0x97, 0xe9, 0xab,
	0x98, 0xe5, 0xba, 0xa6, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe9, 0x87,
	0x91, 0xe9, 0xa2, 0x9d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x74,
	0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x07, 0x74, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0x92,
	0x41, 0x08, 0x32, 0x06, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x74, 0x78, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x45, 0x0a, 0x0e, 0x54,
	0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0xe5, 0x8c, 0xba, 0xe5, 0x9d, 0x97, 0xe9, 0x93, 0xbe, 0x69,
	0x64, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x0f, 0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe6, 0x80, 0xbb, 0xe6,
	0x95, 0xb0, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4,
	0xa5, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x0a,
	0x06, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x81, 0xa2, 0xe5, 0xa4, 0x8d, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f,
	0x52, 0x06, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x0e, 0x54, 0x78, 0x54,
	0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92,
	0x41, 0x0d, 0x32, 0x0b, 0xe5, 0x8c, 0xba, 0xe5, 0x9d, 0x97, 0xe9, 0x93, 0xbe, 0x69, 0x64, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe4, 0xba, 0xa4, 0xe6, 0x98,
	0x93, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe7,
	0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x0f,
	0x54, 0x78, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x78, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe5, 0x01, 0x0a, 0x0b, 0x54, 0x78, 0x54, 0x72, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe7, 0xbb, 0x9f, 0xe8, 0xae, 0xa1, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4,
	0xa5, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x0a,
	0x06, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x81, 0xa2, 0xe5, 0xa4, 0x8d, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f,
	0x52, 0x06, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x80,
	0xbb, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x5d,
	0x0a, 0x13, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe6, 0x80, 0xbb, 0xe6, 0x95,
	0xb0, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe6,
	0x80, 0xbb, 0xe9, 0xa2, 0x9d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x40, 0x0a,
	0x13, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x78, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x54, 0x72, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x8c, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0xbb,
	0x9f, 0xe8, 0xae, 0xa1, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe6, 0x80, 0xbb, 0xe6,
	0x95, 0xb0, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06,
	0xe6, 0x80, 0xbb, 0xe9, 0xa2, 0x9d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8c,
	0x01, 0x0a, 0x0e, 0x44, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe4, 0xba, 0xa4, 0xe6,
	0x98, 0x93, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93,
	0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x32, 0xda, 0x05,
	0x0a, 0x02, 0x54, 0x78, 0x12, 0x41, 0x0a, 0x0a, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x61,
	0x76, 0x65, 0x12, 0x17, 0x2e, 0x74, 0x78, 0x70, 0x62, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x74, 0x78,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x0d, 0x92, 0xf1, 0x04, 0x09, 0x0a, 0x07,
	0x72, 0x70, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x59, 0x0a, 0x06, 0x54, 0x78, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x13, 0x2e, 0x74, 0x78, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x74, 0x78, 0x70, 0x62, 0x2e, 0x54, 0x78,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xf1,
	0x04, 0x06, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01,
	0x2a, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x78, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x5d, 0x0a, 0x07, 0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x2e,
	0x74, 0x78, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x74, 0x78, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xf1, 0x04, 0x06,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22,
	0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x78, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x5d, 0x0a, 0x07, 0x54, 0x78, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x2e, 0x74,
	0x78, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x74, 0x78, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x54, 0x72, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xf1, 0x04, 0x06, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x78, 0x2f, 0x74, 0x72, 0x65, 0x6e, 0x64,
	0x12, 0x65, 0x0a, 0x0a, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13,
	0x2e, 0x74, 0x78, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x74, 0x78, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82,
	0xf1, 0x04, 0x06, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a,
	0x01, 0x2a, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x0b, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x74, 0x78, 0x70, 0x62, 0x2e, 0x54, 0x78,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74,
	0x78, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xf1, 0x04, 0x06, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x69, 0x0a, 0x0b, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x6e,
	0x64, 0x12, 0x14, 0x2e, 0x74, 0x78, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x54, 0x72, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x78, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x29, 0x82, 0xf1, 0x04, 0x06, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x2f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x3b, 0x0a,
	0x07, 0x44, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x74, 0x78, 0x70, 0x62, 0x2e,
	0x44, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b,
	0x2e, 0x74, 0x78, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x0d, 0x92, 0xf1, 0x04,
	0x09, 0x0a, 0x07, 0x72, 0x70, 0x63, 0x41, 0x75, 0x74, 0x68, 0x42, 0x14, 0x92, 0x41, 0x06, 0x12,
	0x04, 0x32, 0x02, 0x76, 0x31, 0x5a, 0x09, 0x2e, 0x2f, 0x70, 0x62, 0x2f, 0x74, 0x78, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_tx_proto_rawDescOnce sync.Once
	file_v1_tx_proto_rawDescData = file_v1_tx_proto_rawDesc
)

func file_v1_tx_proto_rawDescGZIP() []byte {
	file_v1_tx_proto_rawDescOnce.Do(func() {
		file_v1_tx_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_tx_proto_rawDescData)
	})
	return file_v1_tx_proto_rawDescData
}

var file_v1_tx_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_v1_tx_proto_goTypes = []any{
	(*Empty)(nil),               // 0: txpb.Empty
	(*RefundData)(nil),          // 1: txpb.RefundData
	(*BundleSaveRequest)(nil),   // 2: txpb.BundleSaveRequest
	(*PageRequest)(nil),         // 3: txpb.PageRequest
	(*TxListRequest)(nil),       // 4: txpb.TxListRequest
	(*TxListResponse)(nil),      // 5: txpb.TxListResponse
	(*TxResponse)(nil),          // 6: txpb.TxResponse
	(*RefundResponse)(nil),      // 7: txpb.RefundResponse
	(*RefundListResponse)(nil),  // 8: txpb.RefundListResponse
	(*TxCountRequest)(nil),      // 9: txpb.TxCountRequest
	(*TxCountResponse)(nil),     // 10: txpb.TxCountResponse
	(*TxTrendRequest)(nil),      // 11: txpb.TxTrendRequest
	(*TxTrendResponse)(nil),     // 12: txpb.TxTrendResponse
	(*TxTrendData)(nil),         // 13: txpb.TxTrendData
	(*RefundCountResponse)(nil), // 14: txpb.RefundCountResponse
	(*RefundTrendResponse)(nil), // 15: txpb.RefundTrendResponse
	(*RefundTrendData)(nil),     // 16: txpb.RefundTrendData
	(*DoCountRequest)(nil),      // 17: txpb.DoCountRequest
}
var file_v1_tx_proto_depIdxs = []int32{
	1,  // 0: txpb.BundleSaveRequest.refund_data:type_name -> txpb.RefundData
	3,  // 1: txpb.TxListRequest.page:type_name -> txpb.PageRequest
	6,  // 2: txpb.TxListResponse.data:type_name -> txpb.TxResponse
	7,  // 3: txpb.RefundListResponse.data:type_name -> txpb.RefundResponse
	13, // 4: txpb.TxTrendResponse.data:type_name -> txpb.TxTrendData
	16, // 5: txpb.RefundTrendResponse.data:type_name -> txpb.RefundTrendData
	2,  // 6: txpb.Tx.BundleSave:input_type -> txpb.BundleSaveRequest
	4,  // 7: txpb.Tx.TxList:input_type -> txpb.TxListRequest
	9,  // 8: txpb.Tx.TxCount:input_type -> txpb.TxCountRequest
	11, // 9: txpb.Tx.TxTrend:input_type -> txpb.TxTrendRequest
	4,  // 10: txpb.Tx.RefundList:input_type -> txpb.TxListRequest
	9,  // 11: txpb.Tx.RefundCount:input_type -> txpb.TxCountRequest
	11, // 12: txpb.Tx.RefundTrend:input_type -> txpb.TxTrendRequest
	17, // 13: txpb.Tx.DoCount:input_type -> txpb.DoCountRequest
	0,  // 14: txpb.Tx.BundleSave:output_type -> txpb.Empty
	5,  // 15: txpb.Tx.TxList:output_type -> txpb.TxListResponse
	10, // 16: txpb.Tx.TxCount:output_type -> txpb.TxCountResponse
	12, // 17: txpb.Tx.TxTrend:output_type -> txpb.TxTrendResponse
	8,  // 18: txpb.Tx.RefundList:output_type -> txpb.RefundListResponse
	14, // 19: txpb.Tx.RefundCount:output_type -> txpb.RefundCountResponse
	15, // 20: txpb.Tx.RefundTrend:output_type -> txpb.RefundTrendResponse
	0,  // 21: txpb.Tx.DoCount:output_type -> txpb.Empty
	14, // [14:22] is the sub-list for method output_type
	6,  // [6:14] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_v1_tx_proto_init() }
func file_v1_tx_proto_init() {
	if File_v1_tx_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_tx_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_tx_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RefundData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_tx_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*BundleSaveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_tx_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_tx_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*TxListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_tx_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*TxListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_tx_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_tx_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*RefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_tx_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RefundListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_tx_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*TxCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_tx_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*TxCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_tx_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*TxTrendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_tx_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*TxTrendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_tx_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*TxTrendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_tx_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*RefundCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_tx_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*RefundTrendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_tx_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*RefundTrendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_tx_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*DoCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_tx_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_tx_proto_goTypes,
		DependencyIndexes: file_v1_tx_proto_depIdxs,
		MessageInfos:      file_v1_tx_proto_msgTypes,
	}.Build()
	File_v1_tx_proto = out.File
	file_v1_tx_proto_rawDesc = nil
	file_v1_tx_proto_goTypes = nil
	file_v1_tx_proto_depIdxs = nil
}
