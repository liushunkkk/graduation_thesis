// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.19.4
// source: v1/rpcs.proto

package rpcspb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/jzero-io/desc/proto/third_party/jzero/api"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Empty 空对象
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_rpcs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rpcs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_v1_rpcs_proto_rawDescGZIP(), []int{0}
}

// RpcInfoUpdateRequest Rpc设置请求
type RpcInfoUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcId                string `protobuf:"bytes,1,opt,name=rpc_id,proto3" json:"rpc_id,omitempty"`
	Url                  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	HintHash             bool   `protobuf:"varint,3,opt,name=hint_hash,proto3" json:"hint_hash,omitempty"`
	HintFrom             bool   `protobuf:"varint,4,opt,name=hint_from,proto3" json:"hint_from,omitempty"`
	HintTo               bool   `protobuf:"varint,5,opt,name=hint_to,proto3" json:"hint_to,omitempty"`
	HintValue            bool   `protobuf:"varint,6,opt,name=hint_value,proto3" json:"hint_value,omitempty"`
	HintNonce            bool   `protobuf:"varint,7,opt,name=hint_nonce,proto3" json:"hint_nonce,omitempty"`
	HintCalldata         bool   `protobuf:"varint,8,opt,name=hint_calldata,proto3" json:"hint_calldata,omitempty"`
	HintFunctionSelector bool   `protobuf:"varint,9,opt,name=hint_function_selector,proto3" json:"hint_function_selector,omitempty"`
	HintGasLimit         bool   `protobuf:"varint,10,opt,name=hint_gas_limit,proto3" json:"hint_gas_limit,omitempty"`
	HintGasPrice         bool   `protobuf:"varint,11,opt,name=hint_gas_price,proto3" json:"hint_gas_price,omitempty"`
	HintLogs             bool   `protobuf:"varint,12,opt,name=hint_logs,proto3" json:"hint_logs,omitempty"`
	IsRefundOrigin       bool   `protobuf:"varint,13,opt,name=is_refund_origin,proto3" json:"is_refund_origin,omitempty"`
	RefundRecipient      string `protobuf:"bytes,14,opt,name=refund_recipient,proto3" json:"refund_recipient,omitempty"`
	RefundPercent        int32  `protobuf:"varint,15,opt,name=refund_percent,proto3" json:"refund_percent,omitempty"`
	IsProtected          bool   `protobuf:"varint,16,opt,name=is_protected,proto3" json:"is_protected,omitempty"`
}

func (x *RpcInfoUpdateRequest) Reset() {
	*x = RpcInfoUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_rpcs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcInfoUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcInfoUpdateRequest) ProtoMessage() {}

func (x *RpcInfoUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rpcs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcInfoUpdateRequest.ProtoReflect.Descriptor instead.
func (*RpcInfoUpdateRequest) Descriptor() ([]byte, []int) {
	return file_v1_rpcs_proto_rawDescGZIP(), []int{1}
}

func (x *RpcInfoUpdateRequest) GetRpcId() string {
	if x != nil {
		return x.RpcId
	}
	return ""
}

func (x *RpcInfoUpdateRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RpcInfoUpdateRequest) GetHintHash() bool {
	if x != nil {
		return x.HintHash
	}
	return false
}

func (x *RpcInfoUpdateRequest) GetHintFrom() bool {
	if x != nil {
		return x.HintFrom
	}
	return false
}

func (x *RpcInfoUpdateRequest) GetHintTo() bool {
	if x != nil {
		return x.HintTo
	}
	return false
}

func (x *RpcInfoUpdateRequest) GetHintValue() bool {
	if x != nil {
		return x.HintValue
	}
	return false
}

func (x *RpcInfoUpdateRequest) GetHintNonce() bool {
	if x != nil {
		return x.HintNonce
	}
	return false
}

func (x *RpcInfoUpdateRequest) GetHintCalldata() bool {
	if x != nil {
		return x.HintCalldata
	}
	return false
}

func (x *RpcInfoUpdateRequest) GetHintFunctionSelector() bool {
	if x != nil {
		return x.HintFunctionSelector
	}
	return false
}

func (x *RpcInfoUpdateRequest) GetHintGasLimit() bool {
	if x != nil {
		return x.HintGasLimit
	}
	return false
}

func (x *RpcInfoUpdateRequest) GetHintGasPrice() bool {
	if x != nil {
		return x.HintGasPrice
	}
	return false
}

func (x *RpcInfoUpdateRequest) GetHintLogs() bool {
	if x != nil {
		return x.HintLogs
	}
	return false
}

func (x *RpcInfoUpdateRequest) GetIsRefundOrigin() bool {
	if x != nil {
		return x.IsRefundOrigin
	}
	return false
}

func (x *RpcInfoUpdateRequest) GetRefundRecipient() string {
	if x != nil {
		return x.RefundRecipient
	}
	return ""
}

func (x *RpcInfoUpdateRequest) GetRefundPercent() int32 {
	if x != nil {
		return x.RefundPercent
	}
	return 0
}

func (x *RpcInfoUpdateRequest) GetIsProtected() bool {
	if x != nil {
		return x.IsProtected
	}
	return false
}

// GetRpcInfoRequest 获取Rpc设置请求
type GetRpcInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId string `protobuf:"bytes,1,opt,name=chain_id,proto3" json:"chain_id,omitempty"`
}

func (x *GetRpcInfoRequest) Reset() {
	*x = GetRpcInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_rpcs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRpcInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRpcInfoRequest) ProtoMessage() {}

func (x *GetRpcInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rpcs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRpcInfoRequest.ProtoReflect.Descriptor instead.
func (*GetRpcInfoRequest) Descriptor() ([]byte, []int) {
	return file_v1_rpcs_proto_rawDescGZIP(), []int{2}
}

func (x *GetRpcInfoRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

// GetRpcInfoResponse 获取Rpc设置
type GetRpcInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcId                string `protobuf:"bytes,1,opt,name=rpc_id,proto3" json:"rpc_id,omitempty"`
	Url                  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	HintHash             bool   `protobuf:"varint,3,opt,name=hint_hash,proto3" json:"hint_hash,omitempty"`
	HintFrom             bool   `protobuf:"varint,4,opt,name=hint_from,proto3" json:"hint_from,omitempty"`
	HintTo               bool   `protobuf:"varint,5,opt,name=hint_to,proto3" json:"hint_to,omitempty"`
	HintValue            bool   `protobuf:"varint,6,opt,name=hint_value,proto3" json:"hint_value,omitempty"`
	HintNonce            bool   `protobuf:"varint,7,opt,name=hint_nonce,proto3" json:"hint_nonce,omitempty"`
	HintCalldata         bool   `protobuf:"varint,8,opt,name=hint_calldata,proto3" json:"hint_calldata,omitempty"`
	HintFunctionSelector bool   `protobuf:"varint,9,opt,name=hint_function_selector,proto3" json:"hint_function_selector,omitempty"`
	HintGasLimit         bool   `protobuf:"varint,10,opt,name=hint_gas_limit,proto3" json:"hint_gas_limit,omitempty"`
	HintGasPrice         bool   `protobuf:"varint,11,opt,name=hint_gas_price,proto3" json:"hint_gas_price,omitempty"`
	HintLogs             bool   `protobuf:"varint,12,opt,name=hint_logs,proto3" json:"hint_logs,omitempty"`
	IsRefundOrigin       bool   `protobuf:"varint,13,opt,name=is_refund_origin,proto3" json:"is_refund_origin,omitempty"`
	RefundRecipient      string `protobuf:"bytes,14,opt,name=refund_recipient,proto3" json:"refund_recipient,omitempty"`
	RefundPercent        int32  `protobuf:"varint,15,opt,name=refund_percent,proto3" json:"refund_percent,omitempty"`
	IsProtected          bool   `protobuf:"varint,16,opt,name=is_protected,proto3" json:"is_protected,omitempty"`
	UpdateTime           string `protobuf:"bytes,17,opt,name=update_time,proto3" json:"update_time,omitempty"`
	ChainId              string `protobuf:"bytes,18,opt,name=chain_id,proto3" json:"chain_id,omitempty"`
}

func (x *GetRpcInfoResponse) Reset() {
	*x = GetRpcInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_rpcs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRpcInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRpcInfoResponse) ProtoMessage() {}

func (x *GetRpcInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rpcs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRpcInfoResponse.ProtoReflect.Descriptor instead.
func (*GetRpcInfoResponse) Descriptor() ([]byte, []int) {
	return file_v1_rpcs_proto_rawDescGZIP(), []int{3}
}

func (x *GetRpcInfoResponse) GetRpcId() string {
	if x != nil {
		return x.RpcId
	}
	return ""
}

func (x *GetRpcInfoResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetRpcInfoResponse) GetHintHash() bool {
	if x != nil {
		return x.HintHash
	}
	return false
}

func (x *GetRpcInfoResponse) GetHintFrom() bool {
	if x != nil {
		return x.HintFrom
	}
	return false
}

func (x *GetRpcInfoResponse) GetHintTo() bool {
	if x != nil {
		return x.HintTo
	}
	return false
}

func (x *GetRpcInfoResponse) GetHintValue() bool {
	if x != nil {
		return x.HintValue
	}
	return false
}

func (x *GetRpcInfoResponse) GetHintNonce() bool {
	if x != nil {
		return x.HintNonce
	}
	return false
}

func (x *GetRpcInfoResponse) GetHintCalldata() bool {
	if x != nil {
		return x.HintCalldata
	}
	return false
}

func (x *GetRpcInfoResponse) GetHintFunctionSelector() bool {
	if x != nil {
		return x.HintFunctionSelector
	}
	return false
}

func (x *GetRpcInfoResponse) GetHintGasLimit() bool {
	if x != nil {
		return x.HintGasLimit
	}
	return false
}

func (x *GetRpcInfoResponse) GetHintGasPrice() bool {
	if x != nil {
		return x.HintGasPrice
	}
	return false
}

func (x *GetRpcInfoResponse) GetHintLogs() bool {
	if x != nil {
		return x.HintLogs
	}
	return false
}

func (x *GetRpcInfoResponse) GetIsRefundOrigin() bool {
	if x != nil {
		return x.IsRefundOrigin
	}
	return false
}

func (x *GetRpcInfoResponse) GetRefundRecipient() string {
	if x != nil {
		return x.RefundRecipient
	}
	return ""
}

func (x *GetRpcInfoResponse) GetRefundPercent() int32 {
	if x != nil {
		return x.RefundPercent
	}
	return 0
}

func (x *GetRpcInfoResponse) GetIsProtected() bool {
	if x != nil {
		return x.IsProtected
	}
	return false
}

func (x *GetRpcInfoResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *GetRpcInfoResponse) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

// GetAllRpcInfoListRequest 获取Rpc设置列表请求
type GetAllRpcInfoListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId string `protobuf:"bytes,1,opt,name=chain_id,proto3" json:"chain_id,omitempty"`
}

func (x *GetAllRpcInfoListRequest) Reset() {
	*x = GetAllRpcInfoListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_rpcs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllRpcInfoListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRpcInfoListRequest) ProtoMessage() {}

func (x *GetAllRpcInfoListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rpcs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRpcInfoListRequest.ProtoReflect.Descriptor instead.
func (*GetAllRpcInfoListRequest) Descriptor() ([]byte, []int) {
	return file_v1_rpcs_proto_rawDescGZIP(), []int{4}
}

func (x *GetAllRpcInfoListRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

// GetRpcInfoListResponse 获取Rpc设置列表
type GetRpcInfoListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcInfoList []*GetRpcInfoResponse `protobuf:"bytes,1,rep,name=rpc_info_list,json=rpcInfoList,proto3" json:"rpc_info_list,omitempty"`
}

func (x *GetRpcInfoListResponse) Reset() {
	*x = GetRpcInfoListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_rpcs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRpcInfoListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRpcInfoListResponse) ProtoMessage() {}

func (x *GetRpcInfoListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rpcs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRpcInfoListResponse.ProtoReflect.Descriptor instead.
func (*GetRpcInfoListResponse) Descriptor() ([]byte, []int) {
	return file_v1_rpcs_proto_rawDescGZIP(), []int{5}
}

func (x *GetRpcInfoListResponse) GetRpcInfoList() []*GetRpcInfoResponse {
	if x != nil {
		return x.RpcInfoList
	}
	return nil
}

var File_v1_rpcs_proto protoreflect.FileDescriptor

var file_v1_rpcs_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x76, 0x31, 0x2f, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x72, 0x70, 0x63, 0x73, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b,
	0x67, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6a, 0x7a, 0x65,
	0x72, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x6a, 0x7a, 0x65, 0x72, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x7a, 0x72, 0x70,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0xa1, 0x08, 0x0a, 0x14, 0x52, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x70, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x08, 0x32, 0x06,
	0xe7, 0xbc, 0x96, 0xe5, 0x8f, 0xb7, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x72,
	0x70, 0x63, 0x5f, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4,
	0xb9, 0x89, 0x55, 0x52, 0x4c, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x00, 0x18, 0x14, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1a, 0x92, 0x41, 0x12, 0x32, 0x10, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe6, 0x8a, 0xab, 0xe9, 0x9c, 0xb2, 0x68, 0x61, 0x73, 0x68, 0xfa, 0x42, 0x02,
	0x6a, 0x00, 0x52, 0x09, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x38, 0x0a,
	0x09, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x1a, 0x92, 0x41, 0x12, 0x32, 0x10, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x8a, 0xab,
	0xe9, 0x9c, 0xb2, 0x66, 0x72, 0x6f, 0x6d, 0xfa, 0x42, 0x02, 0x6a, 0x00, 0x52, 0x09, 0x68, 0x69,
	0x6e, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x32, 0x0a, 0x07, 0x68, 0x69, 0x6e, 0x74, 0x5f,
	0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x18, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x8a, 0xab, 0xe9, 0x9c, 0xb2, 0x74, 0x6f, 0xfa, 0x42, 0x02,
	0x6a, 0x00, 0x52, 0x07, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x12, 0x3b, 0x0a, 0x0a, 0x68,
	0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x1b, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x8a, 0xab, 0xe9,
	0x9c, 0xb2, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xfa, 0x42, 0x02, 0x6a, 0x00, 0x52, 0x0a, 0x68, 0x69,
	0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x68, 0x69, 0x6e, 0x74,
	0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1b, 0x92, 0x41,
	0x13, 0x32, 0x11, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x8a, 0xab, 0xe9, 0x9c, 0xb2, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0xfa, 0x42, 0x02, 0x6a, 0x00, 0x52, 0x0a, 0x68, 0x69, 0x6e, 0x74, 0x5f,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1e, 0x92, 0x41,
	0x16, 0x32, 0x14, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x8a, 0xab, 0xe9, 0x9c, 0xb2, 0x63,
	0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0xfa, 0x42, 0x02, 0x6a, 0x00, 0x52, 0x0d, 0x68, 0x69,
	0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5f, 0x0a, 0x16, 0x68,
	0x69, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x27, 0x92, 0x41, 0x1f,
	0x32, 0x1d, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x8a, 0xab, 0xe9, 0x9c, 0xb2, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0xfa,
	0x42, 0x02, 0x6a, 0x00, 0x52, 0x16, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x0e,
	0x68, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x1f, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe6, 0x8a, 0xab, 0xe9, 0x9c, 0xb2, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0xfa, 0x42, 0x02, 0x6a, 0x00, 0x52, 0x0e, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x73, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x47, 0x0a, 0x0e, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x61,
	0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1f, 0x92,
	0x41, 0x17, 0x32, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x8a, 0xab, 0xe9, 0x9c, 0xb2,
	0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0xfa, 0x42, 0x02, 0x6a, 0x00, 0x52, 0x0e,
	0x68, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x1a, 0x92, 0x41, 0x12, 0x32, 0x10, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x8a,
	0xab, 0xe9, 0x9c, 0xb2, 0x6c, 0x6f, 0x67, 0x73, 0xfa, 0x42, 0x02, 0x6a, 0x00, 0x52, 0x09, 0x68,
	0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x22, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe8,
	0xbf, 0x94, 0xe5, 0x88, 0xa9, 0xe7, 0xbb, 0x99, 0xe5, 0x8f, 0x91, 0xe8, 0xb5, 0xb7, 0xe4, 0xba,
	0xba, 0xfa, 0x42, 0x02, 0x6a, 0x00, 0x52, 0x10, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x88, 0xa9, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x10, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x42,
	0x0a, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xbf, 0x94,
	0xe5, 0x88, 0xa9, 0xe6, 0xaf, 0x94, 0xe4, 0xbe, 0x8b, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x63,
	0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1c, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe4, 0xbf, 0x9d, 0xe6, 0x8a,
	0xa4, 0xfa, 0x42, 0x02, 0x6a, 0x00, 0x52, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x22, 0x4f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x70, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x0d,
	0x32, 0x0b, 0xe5, 0x8c, 0xba, 0xe5, 0x9d, 0x97, 0xe9, 0x93, 0xbe, 0x49, 0x44, 0xfa, 0x42, 0x0b,
	0x72, 0x09, 0x10, 0x01, 0x52, 0x01, 0x31, 0x52, 0x02, 0x35, 0x36, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xab, 0x08, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x70, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06,
	0x72, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41,
	0x08, 0x32, 0x06, 0xe7, 0xbc, 0x96, 0xe5, 0x8f, 0xb7, 0x52, 0x06, 0x72, 0x70, 0x63, 0x5f, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x55, 0x52,
	0x4c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x8a, 0xab, 0xe9, 0x9c, 0xb2, 0x68, 0x61, 0x73, 0x68,
	0x52, 0x09, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x33, 0x0a, 0x09, 0x68,
	0x69, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x15,
	0x92, 0x41, 0x12, 0x32, 0x10, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x8a, 0xab, 0xe9, 0x9c,
	0xb2, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x09, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x2d, 0x0a, 0x07, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x8a,
	0xab, 0xe9, 0x9c, 0xb2, 0x74, 0x6f, 0x52, 0x07, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x12,
	0x36, 0x0a, 0x0a, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe6, 0x8a, 0xab, 0xe9, 0x9c, 0xb2, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x68, 0x69, 0x6e,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x68, 0x69, 0x6e, 0x74, 0x5f,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16, 0x92, 0x41, 0x13,
	0x32, 0x11, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x8a, 0xab, 0xe9, 0x9c, 0xb2, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x52, 0x0a, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x3f, 0x0a, 0x0d, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe6, 0x8a, 0xab, 0xe9, 0x9c, 0xb2, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x0d, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x5a, 0x0a, 0x16, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x8a, 0xab,
	0xe9, 0x9c, 0xb2, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x16, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0e,
	0x68, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe6, 0x8a, 0xab, 0xe9, 0x9c, 0xb2, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x0e, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x42, 0x0a, 0x0e, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x8a, 0xab, 0xe9, 0x9c, 0xb2, 0x67, 0x61, 0x73, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x0e, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x8a, 0xab, 0xe9, 0x9c, 0xb2, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x09,
	0x68, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x22, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe8, 0xbf, 0x94, 0xe5, 0x88, 0xa9, 0xe7, 0xbb, 0x99, 0xe5, 0x8f, 0x91, 0xe8, 0xb5, 0xb7, 0xe4,
	0xba, 0xba, 0xfa, 0x42, 0x02, 0x6a, 0x00, 0x52, 0x10, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x10, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x88, 0xa9,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x88, 0xa9, 0xe6, 0xaf, 0x94,
	0xe4, 0xbe, 0x8b, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe4, 0xbf, 0x9d, 0xe6,
	0x8a, 0xa4, 0x52, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x33, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xbf, 0xae, 0xe6,
	0x94, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0xe5, 0x8c,
	0xba, 0xe5, 0x9d, 0x97, 0xe9, 0x93, 0xbe, 0x69, 0x64, 0x52, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x22, 0x56, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x70, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1e, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0xe5, 0x8c, 0xba, 0xe5, 0x9d, 0x97, 0xe9, 0x93,
	0xbe, 0x69, 0x64, 0xfa, 0x42, 0x0b, 0x72, 0x09, 0x10, 0x01, 0x52, 0x01, 0x31, 0x52, 0x02, 0x35,
	0x36, 0x52, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x58, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x52, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72,
	0x70, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x72, 0x70, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x32, 0xbf, 0x02, 0x0a, 0x04, 0x52, 0x70, 0x63, 0x73, 0x12, 0x5b,
	0x0a, 0x0d, 0x52, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x2e, 0x72, 0x70, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x72, 0x70, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x70, 0x63, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x52, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x72, 0x70, 0x63, 0x73,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x70, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x64, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52,
	0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x72, 0x70, 0x63,
	0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x70, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72,
	0x70, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0d, 0x92, 0xf1,
	0x04, 0x09, 0x0a, 0x07, 0x72, 0x70, 0x63, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x0a, 0x8a, 0xf1, 0x04,
	0x06, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x42, 0x16, 0x92, 0x41, 0x06, 0x12, 0x04, 0x32, 0x02,
	0x76, 0x31, 0x5a, 0x0b, 0x2e, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x73, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_rpcs_proto_rawDescOnce sync.Once
	file_v1_rpcs_proto_rawDescData = file_v1_rpcs_proto_rawDesc
)

func file_v1_rpcs_proto_rawDescGZIP() []byte {
	file_v1_rpcs_proto_rawDescOnce.Do(func() {
		file_v1_rpcs_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_rpcs_proto_rawDescData)
	})
	return file_v1_rpcs_proto_rawDescData
}

var file_v1_rpcs_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_v1_rpcs_proto_goTypes = []any{
	(*Empty)(nil),                    // 0: rpcspb.Empty
	(*RpcInfoUpdateRequest)(nil),     // 1: rpcspb.RpcInfoUpdateRequest
	(*GetRpcInfoRequest)(nil),        // 2: rpcspb.GetRpcInfoRequest
	(*GetRpcInfoResponse)(nil),       // 3: rpcspb.GetRpcInfoResponse
	(*GetAllRpcInfoListRequest)(nil), // 4: rpcspb.GetAllRpcInfoListRequest
	(*GetRpcInfoListResponse)(nil),   // 5: rpcspb.GetRpcInfoListResponse
}
var file_v1_rpcs_proto_depIdxs = []int32{
	3, // 0: rpcspb.GetRpcInfoListResponse.rpc_info_list:type_name -> rpcspb.GetRpcInfoResponse
	1, // 1: rpcspb.Rpcs.RpcInfoUpdate:input_type -> rpcspb.RpcInfoUpdateRequest
	2, // 2: rpcspb.Rpcs.GetRpcInfo:input_type -> rpcspb.GetRpcInfoRequest
	4, // 3: rpcspb.Rpcs.GetAllRpcInfoList:input_type -> rpcspb.GetAllRpcInfoListRequest
	0, // 4: rpcspb.Rpcs.RpcInfoUpdate:output_type -> rpcspb.Empty
	3, // 5: rpcspb.Rpcs.GetRpcInfo:output_type -> rpcspb.GetRpcInfoResponse
	5, // 6: rpcspb.Rpcs.GetAllRpcInfoList:output_type -> rpcspb.GetRpcInfoListResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_v1_rpcs_proto_init() }
func file_v1_rpcs_proto_init() {
	if File_v1_rpcs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_rpcs_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_rpcs_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RpcInfoUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_rpcs_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetRpcInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_rpcs_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetRpcInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_rpcs_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllRpcInfoListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_rpcs_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetRpcInfoListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_rpcs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_rpcs_proto_goTypes,
		DependencyIndexes: file_v1_rpcs_proto_depIdxs,
		MessageInfos:      file_v1_rpcs_proto_msgTypes,
	}.Build()
	File_v1_rpcs_proto = out.File
	file_v1_rpcs_proto_rawDesc = nil
	file_v1_rpcs_proto_goTypes = nil
	file_v1_rpcs_proto_depIdxs = nil
}
