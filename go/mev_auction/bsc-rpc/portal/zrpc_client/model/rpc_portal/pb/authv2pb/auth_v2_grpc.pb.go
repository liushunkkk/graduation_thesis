// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: v2/auth_v2.proto

package authv2pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthV2_GetAllAuthorization_FullMethodName = "/authv2pb.AuthV2/GetAllAuthorization"
)

// AuthV2Client is the client API for AuthV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthV2Client interface {
	// getAllAuthorization 获取全部授权信息
	GetAllAuthorization(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllAuthorizationResponse, error)
}

type authV2Client struct {
	cc grpc.ClientConnInterface
}

func NewAuthV2Client(cc grpc.ClientConnInterface) AuthV2Client {
	return &authV2Client{cc}
}

func (c *authV2Client) GetAllAuthorization(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllAuthorizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAuthorizationResponse)
	err := c.cc.Invoke(ctx, AuthV2_GetAllAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthV2Server is the server API for AuthV2 service.
// All implementations must embed UnimplementedAuthV2Server
// for forward compatibility.
type AuthV2Server interface {
	// getAllAuthorization 获取全部授权信息
	GetAllAuthorization(context.Context, *Empty) (*GetAllAuthorizationResponse, error)
	mustEmbedUnimplementedAuthV2Server()
}

// UnimplementedAuthV2Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthV2Server struct{}

func (UnimplementedAuthV2Server) GetAllAuthorization(context.Context, *Empty) (*GetAllAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAuthorization not implemented")
}
func (UnimplementedAuthV2Server) mustEmbedUnimplementedAuthV2Server() {}
func (UnimplementedAuthV2Server) testEmbeddedByValue()                {}

// UnsafeAuthV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthV2Server will
// result in compilation errors.
type UnsafeAuthV2Server interface {
	mustEmbedUnimplementedAuthV2Server()
}

func RegisterAuthV2Server(s grpc.ServiceRegistrar, srv AuthV2Server) {
	// If the following call pancis, it indicates UnimplementedAuthV2Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthV2_ServiceDesc, srv)
}

func _AuthV2_GetAllAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV2Server).GetAllAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthV2_GetAllAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV2Server).GetAllAuthorization(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthV2_ServiceDesc is the grpc.ServiceDesc for AuthV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authv2pb.AuthV2",
	HandlerType: (*AuthV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllAuthorization",
			Handler:    _AuthV2_GetAllAuthorization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v2/auth_v2.proto",
}
