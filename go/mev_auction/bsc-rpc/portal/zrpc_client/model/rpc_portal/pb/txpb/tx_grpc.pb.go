// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: v1/tx.proto

package txpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Tx_BundleSave_FullMethodName  = "/txpb.Tx/BundleSave"
	Tx_TxList_FullMethodName      = "/txpb.Tx/TxList"
	Tx_TxCount_FullMethodName     = "/txpb.Tx/TxCount"
	Tx_TxTrend_FullMethodName     = "/txpb.Tx/TxTrend"
	Tx_RefundList_FullMethodName  = "/txpb.Tx/RefundList"
	Tx_RefundCount_FullMethodName = "/txpb.Tx/RefundCount"
	Tx_RefundTrend_FullMethodName = "/txpb.Tx/RefundTrend"
	Tx_DoCount_FullMethodName     = "/txpb.Tx/DoCount"
)

// TxClient is the client API for Tx service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TxClient interface {
	// BundleSave 保存bundle信息
	BundleSave(ctx context.Context, in *BundleSaveRequest, opts ...grpc.CallOption) (*Empty, error)
	// TxList 获取交易列表
	TxList(ctx context.Context, in *TxListRequest, opts ...grpc.CallOption) (*TxListResponse, error)
	// TxCount 获取交易汇总
	TxCount(ctx context.Context, in *TxCountRequest, opts ...grpc.CallOption) (*TxCountResponse, error)
	// TxTrend 获取交易趋势
	TxTrend(ctx context.Context, in *TxTrendRequest, opts ...grpc.CallOption) (*TxTrendResponse, error)
	// RefundList 获取返利列表
	RefundList(ctx context.Context, in *TxListRequest, opts ...grpc.CallOption) (*RefundListResponse, error)
	// RefundCount 获取返利汇总
	RefundCount(ctx context.Context, in *TxCountRequest, opts ...grpc.CallOption) (*RefundCountResponse, error)
	// RefundTrend 获取返利趋势
	RefundTrend(ctx context.Context, in *TxTrendRequest, opts ...grpc.CallOption) (*RefundTrendResponse, error)
	// DoCount 执行统计任务
	DoCount(ctx context.Context, in *DoCountRequest, opts ...grpc.CallOption) (*Empty, error)
}

type txClient struct {
	cc grpc.ClientConnInterface
}

func NewTxClient(cc grpc.ClientConnInterface) TxClient {
	return &txClient{cc}
}

func (c *txClient) BundleSave(ctx context.Context, in *BundleSaveRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Tx_BundleSave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txClient) TxList(ctx context.Context, in *TxListRequest, opts ...grpc.CallOption) (*TxListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxListResponse)
	err := c.cc.Invoke(ctx, Tx_TxList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txClient) TxCount(ctx context.Context, in *TxCountRequest, opts ...grpc.CallOption) (*TxCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxCountResponse)
	err := c.cc.Invoke(ctx, Tx_TxCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txClient) TxTrend(ctx context.Context, in *TxTrendRequest, opts ...grpc.CallOption) (*TxTrendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxTrendResponse)
	err := c.cc.Invoke(ctx, Tx_TxTrend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txClient) RefundList(ctx context.Context, in *TxListRequest, opts ...grpc.CallOption) (*RefundListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundListResponse)
	err := c.cc.Invoke(ctx, Tx_RefundList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txClient) RefundCount(ctx context.Context, in *TxCountRequest, opts ...grpc.CallOption) (*RefundCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundCountResponse)
	err := c.cc.Invoke(ctx, Tx_RefundCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txClient) RefundTrend(ctx context.Context, in *TxTrendRequest, opts ...grpc.CallOption) (*RefundTrendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundTrendResponse)
	err := c.cc.Invoke(ctx, Tx_RefundTrend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txClient) DoCount(ctx context.Context, in *DoCountRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Tx_DoCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TxServer is the server API for Tx service.
// All implementations must embed UnimplementedTxServer
// for forward compatibility.
type TxServer interface {
	// BundleSave 保存bundle信息
	BundleSave(context.Context, *BundleSaveRequest) (*Empty, error)
	// TxList 获取交易列表
	TxList(context.Context, *TxListRequest) (*TxListResponse, error)
	// TxCount 获取交易汇总
	TxCount(context.Context, *TxCountRequest) (*TxCountResponse, error)
	// TxTrend 获取交易趋势
	TxTrend(context.Context, *TxTrendRequest) (*TxTrendResponse, error)
	// RefundList 获取返利列表
	RefundList(context.Context, *TxListRequest) (*RefundListResponse, error)
	// RefundCount 获取返利汇总
	RefundCount(context.Context, *TxCountRequest) (*RefundCountResponse, error)
	// RefundTrend 获取返利趋势
	RefundTrend(context.Context, *TxTrendRequest) (*RefundTrendResponse, error)
	// DoCount 执行统计任务
	DoCount(context.Context, *DoCountRequest) (*Empty, error)
	mustEmbedUnimplementedTxServer()
}

// UnimplementedTxServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTxServer struct{}

func (UnimplementedTxServer) BundleSave(context.Context, *BundleSaveRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BundleSave not implemented")
}
func (UnimplementedTxServer) TxList(context.Context, *TxListRequest) (*TxListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxList not implemented")
}
func (UnimplementedTxServer) TxCount(context.Context, *TxCountRequest) (*TxCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxCount not implemented")
}
func (UnimplementedTxServer) TxTrend(context.Context, *TxTrendRequest) (*TxTrendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxTrend not implemented")
}
func (UnimplementedTxServer) RefundList(context.Context, *TxListRequest) (*RefundListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundList not implemented")
}
func (UnimplementedTxServer) RefundCount(context.Context, *TxCountRequest) (*RefundCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundCount not implemented")
}
func (UnimplementedTxServer) RefundTrend(context.Context, *TxTrendRequest) (*RefundTrendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundTrend not implemented")
}
func (UnimplementedTxServer) DoCount(context.Context, *DoCountRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCount not implemented")
}
func (UnimplementedTxServer) mustEmbedUnimplementedTxServer() {}
func (UnimplementedTxServer) testEmbeddedByValue()            {}

// UnsafeTxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TxServer will
// result in compilation errors.
type UnsafeTxServer interface {
	mustEmbedUnimplementedTxServer()
}

func RegisterTxServer(s grpc.ServiceRegistrar, srv TxServer) {
	// If the following call pancis, it indicates UnimplementedTxServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Tx_ServiceDesc, srv)
}

func _Tx_BundleSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BundleSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxServer).BundleSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tx_BundleSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxServer).BundleSave(ctx, req.(*BundleSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tx_TxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxServer).TxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tx_TxList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxServer).TxList(ctx, req.(*TxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tx_TxCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxServer).TxCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tx_TxCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxServer).TxCount(ctx, req.(*TxCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tx_TxTrend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxTrendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxServer).TxTrend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tx_TxTrend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxServer).TxTrend(ctx, req.(*TxTrendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tx_RefundList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxServer).RefundList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tx_RefundList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxServer).RefundList(ctx, req.(*TxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tx_RefundCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxServer).RefundCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tx_RefundCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxServer).RefundCount(ctx, req.(*TxCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tx_RefundTrend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxTrendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxServer).RefundTrend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tx_RefundTrend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxServer).RefundTrend(ctx, req.(*TxTrendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tx_DoCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxServer).DoCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tx_DoCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxServer).DoCount(ctx, req.(*DoCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tx_ServiceDesc is the grpc.ServiceDesc for Tx service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tx_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "txpb.Tx",
	HandlerType: (*TxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BundleSave",
			Handler:    _Tx_BundleSave_Handler,
		},
		{
			MethodName: "TxList",
			Handler:    _Tx_TxList_Handler,
		},
		{
			MethodName: "TxCount",
			Handler:    _Tx_TxCount_Handler,
		},
		{
			MethodName: "TxTrend",
			Handler:    _Tx_TxTrend_Handler,
		},
		{
			MethodName: "RefundList",
			Handler:    _Tx_RefundList_Handler,
		},
		{
			MethodName: "RefundCount",
			Handler:    _Tx_RefundCount_Handler,
		},
		{
			MethodName: "RefundTrend",
			Handler:    _Tx_RefundTrend_Handler,
		},
		{
			MethodName: "DoCount",
			Handler:    _Tx_DoCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/tx.proto",
}
