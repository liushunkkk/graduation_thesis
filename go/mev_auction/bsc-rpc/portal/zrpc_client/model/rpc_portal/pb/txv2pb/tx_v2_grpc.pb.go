// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: v2/tx_v2.proto

package txv2pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Txv2_ToBTxList_FullMethodName     = "/txv2pb.Txv2/ToBTxList"
	Txv2_ToBRefundList_FullMethodName = "/txv2pb.Txv2/ToBRefundList"
	Txv2_ToBRefundView_FullMethodName = "/txv2pb.Txv2/ToBRefundView"
	Txv2_BundleSave_FullMethodName    = "/txv2pb.Txv2/BundleSave"
	Txv2_TxList_FullMethodName        = "/txv2pb.Txv2/TxList"
	Txv2_TxCount_FullMethodName       = "/txv2pb.Txv2/TxCount"
	Txv2_TxTrend_FullMethodName       = "/txv2pb.Txv2/TxTrend"
	Txv2_RefundList_FullMethodName    = "/txv2pb.Txv2/RefundList"
	Txv2_RefundCount_FullMethodName   = "/txv2pb.Txv2/RefundCount"
	Txv2_RefundTrend_FullMethodName   = "/txv2pb.Txv2/RefundTrend"
	Txv2_DoCount_FullMethodName       = "/txv2pb.Txv2/DoCount"
)

// Txv2Client is the client API for Txv2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Txv2Client interface {
	// ToBTxList
	ToBTxList(ctx context.Context, in *ToBTxListRequest, opts ...grpc.CallOption) (*ToBTxListResponse, error)
	// ToBRefundList
	ToBRefundList(ctx context.Context, in *ToBRefundListRequest, opts ...grpc.CallOption) (*ToBRefundListResponse, error)
	// ToBRefundList
	ToBRefundView(ctx context.Context, in *ToBRefundViewRequest, opts ...grpc.CallOption) (*ToBRefundViewResponse, error)
	// BundleSave 保存bundle信息
	BundleSave(ctx context.Context, in *BundleSaveRequest, opts ...grpc.CallOption) (*Empty, error)
	// TxList 获取交易列表
	TxList(ctx context.Context, in *TxListRequest, opts ...grpc.CallOption) (*TxListResponse, error)
	// TxCount 获取交易汇总
	TxCount(ctx context.Context, in *TxCountRequest, opts ...grpc.CallOption) (*TxCountResponse, error)
	// TxTrend 获取交易趋势
	TxTrend(ctx context.Context, in *TxTrendRequest, opts ...grpc.CallOption) (*TxTrendResponse, error)
	// RefundList 获取返利列表
	RefundList(ctx context.Context, in *TxListRequest, opts ...grpc.CallOption) (*RefundListResponse, error)
	// RefundCount 获取返利汇总
	RefundCount(ctx context.Context, in *TxCountRequest, opts ...grpc.CallOption) (*RefundCountResponse, error)
	// RefundTrend 获取返利趋势
	RefundTrend(ctx context.Context, in *TxTrendRequest, opts ...grpc.CallOption) (*RefundTrendResponse, error)
	// DoCount 执行统计任务
	DoCount(ctx context.Context, in *DoCountRequest, opts ...grpc.CallOption) (*Empty, error)
}

type txv2Client struct {
	cc grpc.ClientConnInterface
}

func NewTxv2Client(cc grpc.ClientConnInterface) Txv2Client {
	return &txv2Client{cc}
}

func (c *txv2Client) ToBTxList(ctx context.Context, in *ToBTxListRequest, opts ...grpc.CallOption) (*ToBTxListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToBTxListResponse)
	err := c.cc.Invoke(ctx, Txv2_ToBTxList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txv2Client) ToBRefundList(ctx context.Context, in *ToBRefundListRequest, opts ...grpc.CallOption) (*ToBRefundListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToBRefundListResponse)
	err := c.cc.Invoke(ctx, Txv2_ToBRefundList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txv2Client) ToBRefundView(ctx context.Context, in *ToBRefundViewRequest, opts ...grpc.CallOption) (*ToBRefundViewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToBRefundViewResponse)
	err := c.cc.Invoke(ctx, Txv2_ToBRefundView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txv2Client) BundleSave(ctx context.Context, in *BundleSaveRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Txv2_BundleSave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txv2Client) TxList(ctx context.Context, in *TxListRequest, opts ...grpc.CallOption) (*TxListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxListResponse)
	err := c.cc.Invoke(ctx, Txv2_TxList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txv2Client) TxCount(ctx context.Context, in *TxCountRequest, opts ...grpc.CallOption) (*TxCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxCountResponse)
	err := c.cc.Invoke(ctx, Txv2_TxCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txv2Client) TxTrend(ctx context.Context, in *TxTrendRequest, opts ...grpc.CallOption) (*TxTrendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxTrendResponse)
	err := c.cc.Invoke(ctx, Txv2_TxTrend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txv2Client) RefundList(ctx context.Context, in *TxListRequest, opts ...grpc.CallOption) (*RefundListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundListResponse)
	err := c.cc.Invoke(ctx, Txv2_RefundList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txv2Client) RefundCount(ctx context.Context, in *TxCountRequest, opts ...grpc.CallOption) (*RefundCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundCountResponse)
	err := c.cc.Invoke(ctx, Txv2_RefundCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txv2Client) RefundTrend(ctx context.Context, in *TxTrendRequest, opts ...grpc.CallOption) (*RefundTrendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundTrendResponse)
	err := c.cc.Invoke(ctx, Txv2_RefundTrend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txv2Client) DoCount(ctx context.Context, in *DoCountRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Txv2_DoCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Txv2Server is the server API for Txv2 service.
// All implementations must embed UnimplementedTxv2Server
// for forward compatibility.
type Txv2Server interface {
	// ToBTxList
	ToBTxList(context.Context, *ToBTxListRequest) (*ToBTxListResponse, error)
	// ToBRefundList
	ToBRefundList(context.Context, *ToBRefundListRequest) (*ToBRefundListResponse, error)
	// ToBRefundList
	ToBRefundView(context.Context, *ToBRefundViewRequest) (*ToBRefundViewResponse, error)
	// BundleSave 保存bundle信息
	BundleSave(context.Context, *BundleSaveRequest) (*Empty, error)
	// TxList 获取交易列表
	TxList(context.Context, *TxListRequest) (*TxListResponse, error)
	// TxCount 获取交易汇总
	TxCount(context.Context, *TxCountRequest) (*TxCountResponse, error)
	// TxTrend 获取交易趋势
	TxTrend(context.Context, *TxTrendRequest) (*TxTrendResponse, error)
	// RefundList 获取返利列表
	RefundList(context.Context, *TxListRequest) (*RefundListResponse, error)
	// RefundCount 获取返利汇总
	RefundCount(context.Context, *TxCountRequest) (*RefundCountResponse, error)
	// RefundTrend 获取返利趋势
	RefundTrend(context.Context, *TxTrendRequest) (*RefundTrendResponse, error)
	// DoCount 执行统计任务
	DoCount(context.Context, *DoCountRequest) (*Empty, error)
	mustEmbedUnimplementedTxv2Server()
}

// UnimplementedTxv2Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTxv2Server struct{}

func (UnimplementedTxv2Server) ToBTxList(context.Context, *ToBTxListRequest) (*ToBTxListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToBTxList not implemented")
}
func (UnimplementedTxv2Server) ToBRefundList(context.Context, *ToBRefundListRequest) (*ToBRefundListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToBRefundList not implemented")
}
func (UnimplementedTxv2Server) ToBRefundView(context.Context, *ToBRefundViewRequest) (*ToBRefundViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToBRefundView not implemented")
}
func (UnimplementedTxv2Server) BundleSave(context.Context, *BundleSaveRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BundleSave not implemented")
}
func (UnimplementedTxv2Server) TxList(context.Context, *TxListRequest) (*TxListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxList not implemented")
}
func (UnimplementedTxv2Server) TxCount(context.Context, *TxCountRequest) (*TxCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxCount not implemented")
}
func (UnimplementedTxv2Server) TxTrend(context.Context, *TxTrendRequest) (*TxTrendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxTrend not implemented")
}
func (UnimplementedTxv2Server) RefundList(context.Context, *TxListRequest) (*RefundListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundList not implemented")
}
func (UnimplementedTxv2Server) RefundCount(context.Context, *TxCountRequest) (*RefundCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundCount not implemented")
}
func (UnimplementedTxv2Server) RefundTrend(context.Context, *TxTrendRequest) (*RefundTrendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundTrend not implemented")
}
func (UnimplementedTxv2Server) DoCount(context.Context, *DoCountRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCount not implemented")
}
func (UnimplementedTxv2Server) mustEmbedUnimplementedTxv2Server() {}
func (UnimplementedTxv2Server) testEmbeddedByValue()              {}

// UnsafeTxv2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Txv2Server will
// result in compilation errors.
type UnsafeTxv2Server interface {
	mustEmbedUnimplementedTxv2Server()
}

func RegisterTxv2Server(s grpc.ServiceRegistrar, srv Txv2Server) {
	// If the following call pancis, it indicates UnimplementedTxv2Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Txv2_ServiceDesc, srv)
}

func _Txv2_ToBTxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToBTxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Txv2Server).ToBTxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Txv2_ToBTxList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Txv2Server).ToBTxList(ctx, req.(*ToBTxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txv2_ToBRefundList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToBRefundListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Txv2Server).ToBRefundList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Txv2_ToBRefundList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Txv2Server).ToBRefundList(ctx, req.(*ToBRefundListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txv2_ToBRefundView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToBRefundViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Txv2Server).ToBRefundView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Txv2_ToBRefundView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Txv2Server).ToBRefundView(ctx, req.(*ToBRefundViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txv2_BundleSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BundleSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Txv2Server).BundleSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Txv2_BundleSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Txv2Server).BundleSave(ctx, req.(*BundleSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txv2_TxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Txv2Server).TxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Txv2_TxList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Txv2Server).TxList(ctx, req.(*TxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txv2_TxCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Txv2Server).TxCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Txv2_TxCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Txv2Server).TxCount(ctx, req.(*TxCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txv2_TxTrend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxTrendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Txv2Server).TxTrend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Txv2_TxTrend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Txv2Server).TxTrend(ctx, req.(*TxTrendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txv2_RefundList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Txv2Server).RefundList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Txv2_RefundList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Txv2Server).RefundList(ctx, req.(*TxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txv2_RefundCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Txv2Server).RefundCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Txv2_RefundCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Txv2Server).RefundCount(ctx, req.(*TxCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txv2_RefundTrend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxTrendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Txv2Server).RefundTrend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Txv2_RefundTrend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Txv2Server).RefundTrend(ctx, req.(*TxTrendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txv2_DoCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Txv2Server).DoCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Txv2_DoCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Txv2Server).DoCount(ctx, req.(*DoCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Txv2_ServiceDesc is the grpc.ServiceDesc for Txv2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Txv2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "txv2pb.Txv2",
	HandlerType: (*Txv2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ToBTxList",
			Handler:    _Txv2_ToBTxList_Handler,
		},
		{
			MethodName: "ToBRefundList",
			Handler:    _Txv2_ToBRefundList_Handler,
		},
		{
			MethodName: "ToBRefundView",
			Handler:    _Txv2_ToBRefundView_Handler,
		},
		{
			MethodName: "BundleSave",
			Handler:    _Txv2_BundleSave_Handler,
		},
		{
			MethodName: "TxList",
			Handler:    _Txv2_TxList_Handler,
		},
		{
			MethodName: "TxCount",
			Handler:    _Txv2_TxCount_Handler,
		},
		{
			MethodName: "TxTrend",
			Handler:    _Txv2_TxTrend_Handler,
		},
		{
			MethodName: "RefundList",
			Handler:    _Txv2_RefundList_Handler,
		},
		{
			MethodName: "RefundCount",
			Handler:    _Txv2_RefundCount_Handler,
		},
		{
			MethodName: "RefundTrend",
			Handler:    _Txv2_RefundTrend_Handler,
		},
		{
			MethodName: "DoCount",
			Handler:    _Txv2_DoCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v2/tx_v2.proto",
}
