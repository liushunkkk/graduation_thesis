// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.19.4
// source: v2/tx_v2.proto

package txv2pb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/jzero-io/desc/proto/third_party/jzero/api"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PageRequest
type PageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// page_size
	PageSize int64 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page_num
	PageNum int64 `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
}

func (x *PageRequest) Reset() {
	*x = PageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageRequest) ProtoMessage() {}

func (x *PageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageRequest.ProtoReflect.Descriptor instead.
func (*PageRequest) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{0}
}

func (x *PageRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PageRequest) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

// ToBRefundListRequest
type ToBRefundListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      *PageRequest `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	StartTime string       `protobuf:"bytes,3,opt,name=start_time,proto3" json:"start_time,omitempty"`
	EndTime   string       `protobuf:"bytes,4,opt,name=end_time,proto3" json:"end_time,omitempty"`
}

func (x *ToBRefundListRequest) Reset() {
	*x = ToBRefundListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToBRefundListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToBRefundListRequest) ProtoMessage() {}

func (x *ToBRefundListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToBRefundListRequest.ProtoReflect.Descriptor instead.
func (*ToBRefundListRequest) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{1}
}

func (x *ToBRefundListRequest) GetPage() *PageRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ToBRefundListRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ToBRefundListRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type ToBRefundListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode string            `protobuf:"bytes,1,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	Message    string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*RefundResponse `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ToBRefundListResponse) Reset() {
	*x = ToBRefundListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToBRefundListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToBRefundListResponse) ProtoMessage() {}

func (x *ToBRefundListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToBRefundListResponse.ProtoReflect.Descriptor instead.
func (*ToBRefundListResponse) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{2}
}

func (x *ToBRefundListResponse) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *ToBRefundListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ToBRefundListResponse) GetData() []*RefundResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

// ToBTxListRequest
type ToBTxListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      *PageRequest `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	StartTime string       `protobuf:"bytes,3,opt,name=start_time,proto3" json:"start_time,omitempty"`
	EndTime   string       `protobuf:"bytes,4,opt,name=end_time,proto3" json:"end_time,omitempty"`
}

func (x *ToBTxListRequest) Reset() {
	*x = ToBTxListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToBTxListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToBTxListRequest) ProtoMessage() {}

func (x *ToBTxListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToBTxListRequest.ProtoReflect.Descriptor instead.
func (*ToBTxListRequest) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{3}
}

func (x *ToBTxListRequest) GetPage() *PageRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ToBTxListRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ToBTxListRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type ToBTxListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode string        `protobuf:"bytes,1,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	Message    string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*TxResponse `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ToBTxListResponse) Reset() {
	*x = ToBTxListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToBTxListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToBTxListResponse) ProtoMessage() {}

func (x *ToBTxListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToBTxListResponse.ProtoReflect.Descriptor instead.
func (*ToBTxListResponse) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{4}
}

func (x *ToBTxListResponse) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *ToBTxListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ToBTxListResponse) GetData() []*TxResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type TxListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*TxResponse `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TxListResponse) Reset() {
	*x = TxListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxListResponse) ProtoMessage() {}

func (x *TxListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxListResponse.ProtoReflect.Descriptor instead.
func (*TxListResponse) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{5}
}

func (x *TxListResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TxListResponse) GetData() []*TxResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

// TxResponse
type TxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash      string `protobuf:"bytes,1,opt,name=tx_hash,proto3" json:"tx_hash,omitempty"`
	Status      string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	BlockNumber string `protobuf:"bytes,3,opt,name=block_number,proto3" json:"block_number,omitempty"`
	GasUsed     string `protobuf:"bytes,4,opt,name=gas_used,proto3" json:"gas_used,omitempty"`
	GasPrice    string `protobuf:"bytes,5,opt,name=gas_price,proto3" json:"gas_price,omitempty"`
	TranFee     string `protobuf:"bytes,6,opt,name=tran_fee,proto3" json:"tran_fee,omitempty"`
	TxTime      string `protobuf:"bytes,7,opt,name=tx_time,proto3" json:"tx_time,omitempty"`
}

func (x *TxResponse) Reset() {
	*x = TxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxResponse) ProtoMessage() {}

func (x *TxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxResponse.ProtoReflect.Descriptor instead.
func (*TxResponse) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{6}
}

func (x *TxResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *TxResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TxResponse) GetBlockNumber() string {
	if x != nil {
		return x.BlockNumber
	}
	return ""
}

func (x *TxResponse) GetGasUsed() string {
	if x != nil {
		return x.GasUsed
	}
	return ""
}

func (x *TxResponse) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *TxResponse) GetTranFee() string {
	if x != nil {
		return x.TranFee
	}
	return ""
}

func (x *TxResponse) GetTxTime() string {
	if x != nil {
		return x.TxTime
	}
	return ""
}

// RefundResponse
type RefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash       string   `protobuf:"bytes,1,opt,name=tx_hash,proto3" json:"tx_hash,omitempty"`
	OriginHashes []string `protobuf:"bytes,2,rep,name=origin_hashes,proto3" json:"origin_hashes,omitempty"`
	BlockNumber  string   `protobuf:"bytes,3,opt,name=block_number,proto3" json:"block_number,omitempty"`
	Value        string   `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	TxTime       string   `protobuf:"bytes,7,opt,name=tx_time,proto3" json:"tx_time,omitempty"`
}

func (x *RefundResponse) Reset() {
	*x = RefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundResponse) ProtoMessage() {}

func (x *RefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundResponse.ProtoReflect.Descriptor instead.
func (*RefundResponse) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{7}
}

func (x *RefundResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *RefundResponse) GetOriginHashes() []string {
	if x != nil {
		return x.OriginHashes
	}
	return nil
}

func (x *RefundResponse) GetBlockNumber() string {
	if x != nil {
		return x.BlockNumber
	}
	return ""
}

func (x *RefundResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *RefundResponse) GetTxTime() string {
	if x != nil {
		return x.TxTime
	}
	return ""
}

// RefundListResponse
type RefundListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*RefundResponse `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *RefundListResponse) Reset() {
	*x = RefundListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundListResponse) ProtoMessage() {}

func (x *RefundListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundListResponse.ProtoReflect.Descriptor instead.
func (*RefundListResponse) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{8}
}

func (x *RefundListResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RefundListResponse) GetData() []*RefundResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

// ToBRefundViewRequest
type ToBRefundViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (x *ToBRefundViewRequest) Reset() {
	*x = ToBRefundViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToBRefundViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToBRefundViewRequest) ProtoMessage() {}

func (x *ToBRefundViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToBRefundViewRequest.ProtoReflect.Descriptor instead.
func (*ToBRefundViewRequest) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{9}
}

func (x *ToBRefundViewRequest) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type ToBRefundViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode string          `protobuf:"bytes,1,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	Message    string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data       *RefundResponse `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ToBRefundViewResponse) Reset() {
	*x = ToBRefundViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToBRefundViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToBRefundViewResponse) ProtoMessage() {}

func (x *ToBRefundViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToBRefundViewResponse.ProtoReflect.Descriptor instead.
func (*ToBRefundViewResponse) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{10}
}

func (x *ToBRefundViewResponse) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *ToBRefundViewResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ToBRefundViewResponse) GetData() *RefundResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

// Empty 空对象
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{11}
}

type RefundData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// refund_address 返利地址
	RefundAddress string `protobuf:"bytes,1,opt,name=refund_address,proto3" json:"refund_address,omitempty"`
	// refund_percent 返利比例
	RefundPercent uint32 `protobuf:"varint,5,opt,name=refund_percent,proto3" json:"refund_percent,omitempty"`
	// bribe_percent 贿赂比例
	BribePercent uint32 `protobuf:"varint,6,opt,name=bribe_percent,proto3" json:"bribe_percent,omitempty"`
	// scutum_percent 服务费率
	ScutumPercent uint32 `protobuf:"varint,7,opt,name=scutum_percent,proto3" json:"scutum_percent,omitempty"`
}

func (x *RefundData) Reset() {
	*x = RefundData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundData) ProtoMessage() {}

func (x *RefundData) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundData.ProtoReflect.Descriptor instead.
func (*RefundData) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{12}
}

func (x *RefundData) GetRefundAddress() string {
	if x != nil {
		return x.RefundAddress
	}
	return ""
}

func (x *RefundData) GetRefundPercent() uint32 {
	if x != nil {
		return x.RefundPercent
	}
	return 0
}

func (x *RefundData) GetBribePercent() uint32 {
	if x != nil {
		return x.BribePercent
	}
	return 0
}

func (x *RefundData) GetScutumPercent() uint32 {
	if x != nil {
		return x.ScutumPercent
	}
	return 0
}

// TxsData 交易数据
type TxsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash         string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Type           uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	ArrivalTime    string `protobuf:"bytes,3,opt,name=arrival_time,proto3" json:"arrival_time,omitempty"`
	BundleSendTime string `protobuf:"bytes,4,opt,name=bundle_send_time,proto3" json:"bundle_send_time,omitempty"`
	// RefundData 返利数据，type=1、2时必填
	RefundData *RefundData `protobuf:"bytes,5,opt,name=refund_data,proto3" json:"refund_data,omitempty"`
}

func (x *TxsData) Reset() {
	*x = TxsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxsData) ProtoMessage() {}

func (x *TxsData) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxsData.ProtoReflect.Descriptor instead.
func (*TxsData) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{13}
}

func (x *TxsData) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *TxsData) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TxsData) GetArrivalTime() string {
	if x != nil {
		return x.ArrivalTime
	}
	return ""
}

func (x *TxsData) GetBundleSendTime() string {
	if x != nil {
		return x.BundleSendTime
	}
	return ""
}

func (x *TxsData) GetRefundData() *RefundData {
	if x != nil {
		return x.RefundData
	}
	return nil
}

type BundleSaveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId    string     `protobuf:"bytes,1,opt,name=chain_id,proto3" json:"chain_id,omitempty"`
	RpcId      string     `protobuf:"bytes,2,opt,name=rpc_id,proto3" json:"rpc_id,omitempty"`
	ParentHash string     `protobuf:"bytes,3,opt,name=parent_hash,proto3" json:"parent_hash,omitempty"`
	BundleHash string     `protobuf:"bytes,4,opt,name=bundle_hash,proto3" json:"bundle_hash,omitempty"`
	TxsData    []*TxsData `protobuf:"bytes,5,rep,name=txs_data,proto3" json:"txs_data,omitempty"`
}

func (x *BundleSaveRequest) Reset() {
	*x = BundleSaveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BundleSaveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleSaveRequest) ProtoMessage() {}

func (x *BundleSaveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleSaveRequest.ProtoReflect.Descriptor instead.
func (*BundleSaveRequest) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{14}
}

func (x *BundleSaveRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *BundleSaveRequest) GetRpcId() string {
	if x != nil {
		return x.RpcId
	}
	return ""
}

func (x *BundleSaveRequest) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *BundleSaveRequest) GetBundleHash() string {
	if x != nil {
		return x.BundleHash
	}
	return ""
}

func (x *BundleSaveRequest) GetTxsData() []*TxsData {
	if x != nil {
		return x.TxsData
	}
	return nil
}

type TxListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       *PageRequest `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	ChainId    string       `protobuf:"bytes,2,opt,name=chain_id,proto3" json:"chain_id,omitempty"`
	StartTime  string       `protobuf:"bytes,3,opt,name=start_time,proto3" json:"start_time,omitempty"`
	EndTime    string       `protobuf:"bytes,4,opt,name=end_time,proto3" json:"end_time,omitempty"`
	OriginHash string       `protobuf:"bytes,5,opt,name=origin_hash,proto3" json:"origin_hash,omitempty"`
}

func (x *TxListRequest) Reset() {
	*x = TxListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxListRequest) ProtoMessage() {}

func (x *TxListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxListRequest.ProtoReflect.Descriptor instead.
func (*TxListRequest) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{15}
}

func (x *TxListRequest) GetPage() *PageRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *TxListRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *TxListRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *TxListRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *TxListRequest) GetOriginHash() string {
	if x != nil {
		return x.OriginHash
	}
	return ""
}

// TxCountRequest 交易信息统计
type TxCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId string `protobuf:"bytes,1,opt,name=chain_id,proto3" json:"chain_id,omitempty"`
}

func (x *TxCountRequest) Reset() {
	*x = TxCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxCountRequest) ProtoMessage() {}

func (x *TxCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxCountRequest.ProtoReflect.Descriptor instead.
func (*TxCountRequest) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{16}
}

func (x *TxCountRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

// TxCountResponse 交易信息统计
type TxCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Success int64 `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Fail    int64 `protobuf:"varint,3,opt,name=fail,proto3" json:"fail,omitempty"`
	Revert  int64 `protobuf:"varint,4,opt,name=revert,proto3" json:"revert,omitempty"`
}

func (x *TxCountResponse) Reset() {
	*x = TxCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxCountResponse) ProtoMessage() {}

func (x *TxCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxCountResponse.ProtoReflect.Descriptor instead.
func (*TxCountResponse) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{17}
}

func (x *TxCountResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TxCountResponse) GetSuccess() int64 {
	if x != nil {
		return x.Success
	}
	return 0
}

func (x *TxCountResponse) GetFail() int64 {
	if x != nil {
		return x.Fail
	}
	return 0
}

func (x *TxCountResponse) GetRevert() int64 {
	if x != nil {
		return x.Revert
	}
	return 0
}

// TxTrendRequest 交易趋势统计
type TxTrendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId   string `protobuf:"bytes,2,opt,name=chain_id,proto3" json:"chain_id,omitempty"`
	StartTime string `protobuf:"bytes,3,opt,name=start_time,proto3" json:"start_time,omitempty"`
	EndTime   string `protobuf:"bytes,4,opt,name=end_time,proto3" json:"end_time,omitempty"`
}

func (x *TxTrendRequest) Reset() {
	*x = TxTrendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxTrendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxTrendRequest) ProtoMessage() {}

func (x *TxTrendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxTrendRequest.ProtoReflect.Descriptor instead.
func (*TxTrendRequest) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{18}
}

func (x *TxTrendRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *TxTrendRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *TxTrendRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

// TxTrendResponse 交易趋势统计
type TxTrendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TxTrendData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TxTrendResponse) Reset() {
	*x = TxTrendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxTrendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxTrendResponse) ProtoMessage() {}

func (x *TxTrendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxTrendResponse.ProtoReflect.Descriptor instead.
func (*TxTrendResponse) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{19}
}

func (x *TxTrendResponse) GetData() []*TxTrendData {
	if x != nil {
		return x.Data
	}
	return nil
}

// TxTrendData 交易趋势统计数据
type TxTrendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountTime string `protobuf:"bytes,1,opt,name=count_time,proto3" json:"count_time,omitempty"`
	Success   int64  `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Fail      int64  `protobuf:"varint,3,opt,name=fail,proto3" json:"fail,omitempty"`
	Revert    int64  `protobuf:"varint,4,opt,name=revert,proto3" json:"revert,omitempty"`
	Total     int64  `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *TxTrendData) Reset() {
	*x = TxTrendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxTrendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxTrendData) ProtoMessage() {}

func (x *TxTrendData) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxTrendData.ProtoReflect.Descriptor instead.
func (*TxTrendData) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{20}
}

func (x *TxTrendData) GetCountTime() string {
	if x != nil {
		return x.CountTime
	}
	return ""
}

func (x *TxTrendData) GetSuccess() int64 {
	if x != nil {
		return x.Success
	}
	return 0
}

func (x *TxTrendData) GetFail() int64 {
	if x != nil {
		return x.Fail
	}
	return 0
}

func (x *TxTrendData) GetRevert() int64 {
	if x != nil {
		return x.Revert
	}
	return 0
}

func (x *TxTrendData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// RefundCountResponse 返利统计
type RefundCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total  int64  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *RefundCountResponse) Reset() {
	*x = RefundCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundCountResponse) ProtoMessage() {}

func (x *RefundCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundCountResponse.ProtoReflect.Descriptor instead.
func (*RefundCountResponse) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{21}
}

func (x *RefundCountResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RefundCountResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// RefundTrendResponse 返利趋势统计
type RefundTrendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*RefundTrendData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *RefundTrendResponse) Reset() {
	*x = RefundTrendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundTrendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundTrendResponse) ProtoMessage() {}

func (x *RefundTrendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundTrendResponse.ProtoReflect.Descriptor instead.
func (*RefundTrendResponse) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{22}
}

func (x *RefundTrendResponse) GetData() []*RefundTrendData {
	if x != nil {
		return x.Data
	}
	return nil
}

// RefundTrendData 返利趋势统计数据
type RefundTrendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountTime string `protobuf:"bytes,1,opt,name=count_time,proto3" json:"count_time,omitempty"`
	Total     int64  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Amount    string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *RefundTrendData) Reset() {
	*x = RefundTrendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundTrendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundTrendData) ProtoMessage() {}

func (x *RefundTrendData) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundTrendData.ProtoReflect.Descriptor instead.
func (*RefundTrendData) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{23}
}

func (x *RefundTrendData) GetCountTime() string {
	if x != nil {
		return x.CountTime
	}
	return ""
}

func (x *RefundTrendData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RefundTrendData) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// DoCountRequest 统计请求
type DoCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime string `protobuf:"bytes,3,opt,name=start_time,proto3" json:"start_time,omitempty"`
	EndTime   string `protobuf:"bytes,4,opt,name=end_time,proto3" json:"end_time,omitempty"`
}

func (x *DoCountRequest) Reset() {
	*x = DoCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_tx_v2_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoCountRequest) ProtoMessage() {}

func (x *DoCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v2_tx_v2_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoCountRequest.ProtoReflect.Descriptor instead.
func (*DoCountRequest) Descriptor() ([]byte, []int) {
	return file_v2_tx_v2_proto_rawDescGZIP(), []int{24}
}

func (x *DoCountRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *DoCountRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

var File_v2_tx_v2_proto protoreflect.FileDescriptor

var file_v2_tx_v2_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x76, 0x32, 0x2f, 0x74, 0x78, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x74, 0x78, 0x76, 0x32, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x3b, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6a, 0x7a,
	0x65, 0x72, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x6a, 0x7a, 0x65, 0x72, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x7a, 0x72,
	0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7b, 0x0a, 0x0b, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x19, 0x92, 0x41, 0x0f, 0x32,
	0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xfa, 0x42,
	0x04, 0x22, 0x02, 0x28, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x34, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x19, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x01, 0x52, 0x07, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0xcb, 0x01, 0x0a, 0x14, 0x54, 0x6f, 0x42, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x78, 0x76, 0x32, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c,
	0x32, 0x1a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x79, 0x79, 0x79, 0x79, 0x2d, 0x4d, 0x4d,
	0x2d, 0x64, 0x64, 0x20, 0x48, 0x48, 0x3a, 0x6d, 0x6d, 0x3a, 0x73, 0x73, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x42, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x26, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x79,
	0x79, 0x79, 0x79, 0x2d, 0x4d, 0x4d, 0x2d, 0x64, 0x64, 0x20, 0x48, 0x48, 0x3a, 0x6d, 0x6d, 0x3a,
	0x73, 0x73, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x15, 0x54, 0x6f, 0x42, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x30, 0x3a, 0x6f, 0x6b, 0x3b, 0x20, 0x3e, 0x3d, 0x31, 0x3a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x32, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x78, 0x76, 0x32, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc7, 0x01, 0x0a, 0x10, 0x54, 0x6f, 0x42, 0x54, 0x78, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x78, 0x76, 0x32, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x20, 0x79, 0x79, 0x79, 0x79, 0x2d, 0x4d, 0x4d, 0x2d, 0x64, 0x64, 0x20,
	0x48, 0x48, 0x3a, 0x6d, 0x6d, 0x3a, 0x73, 0x73, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92,
	0x41, 0x1c, 0x32, 0x1a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x79, 0x79, 0x79, 0x79, 0x2d,
	0x4d, 0x4d, 0x2d, 0x64, 0x64, 0x20, 0x48, 0x48, 0x3a, 0x6d, 0x6d, 0x3a, 0x73, 0x73, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0xa7, 0x01, 0x0a, 0x11, 0x54, 0x6f, 0x42, 0x54, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x30, 0x3a,
	0x6f, 0x6b, 0x3b, 0x20, 0x3e, 0x3d, 0x31, 0x3a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x32,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x74, 0x78, 0x76, 0x32, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5a, 0x0a, 0x0e, 0x54, 0x78, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x32,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x78,
	0x76, 0x32, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbc, 0x02, 0x0a, 0x0a, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x32, 0x07, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x52, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41,
	0x08, 0x32, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x35, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32,
	0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x52, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0x67, 0x61, 0x73,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x52, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x29, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x66,
	0x65, 0x65, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x07,
	0x74, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x92,
	0x41, 0x09, 0x32, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x74, 0x78, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x32, 0x07, 0x74,
	0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x52, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x38, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x74, 0x78, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x32,
	0x07, 0x74, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x62, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x32, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x78, 0x76, 0x32, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x14, 0x54, 0x6f, 0x42, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0x92, 0x41, 0x09, 0x32, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x22, 0xaf, 0x01, 0x0a, 0x15,
	0x54, 0x6f, 0x42, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x30, 0x3a,
	0x6f, 0x6b, 0x3b, 0x20, 0x3e, 0x3d, 0x31, 0x3a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x32,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x74, 0x78, 0x76, 0x32, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x07, 0x0a,
	0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xa0, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x88, 0xa9, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x2a, 0x18, 0x2a, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x20, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xbf,
	0x94, 0xe5, 0x88, 0xa9, 0xe6, 0xaf, 0x94, 0xe4, 0xbe, 0x8b, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18,
	0x63, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x62, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe8, 0xb4, 0xbf, 0xe8, 0xb5, 0x82, 0xe6, 0xaf, 0x94, 0xe4, 0xbe, 0x8b, 0xfa, 0x42, 0x06,
	0x2a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52, 0x0d, 0x62, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x63, 0x75, 0x74, 0x75, 0x6d, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0xb4, 0xb9, 0xe7, 0x8e, 0x87,
	0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x75, 0x74, 0x75,
	0x6d, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0xcc, 0x03, 0x0a, 0x07, 0x54, 0x78,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe4, 0xba, 0xa4,
	0xe6, 0x98, 0x93, 0xe5, 0x93, 0x88, 0xe5, 0xb8, 0x8c, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x42,
	0x18, 0x42, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x64, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x50, 0x92, 0x41, 0x42, 0x32, 0x40, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x20, 0x30, 0x3a, 0xe5, 0x8e, 0x9f, 0xe5, 0xa7, 0x8b, 0xe4, 0xba,
	0xa4, 0xe6, 0x98, 0x93, 0x20, 0x31, 0x3a, 0xe4, 0xb8, 0x80, 0xe6, 0xac, 0xa1, 0xe8, 0xbf, 0x94,
	0xe5, 0x88, 0xa9, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0x20, 0x32, 0x3a, 0xe4, 0xba, 0x8c, 0xe6,
	0xac, 0xa1, 0xe8, 0xbf, 0x94, 0xe5, 0x88, 0xa9, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0x20, 0xfa,
	0x42, 0x08, 0x2a, 0x06, 0x30, 0x00, 0x30, 0x01, 0x30, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x49, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5, 0xae, 0xa2,
	0xe6, 0x88, 0xb7, 0xe7, 0xab, 0xaf, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe8, 0xbe, 0xbe, 0xe5,
	0x88, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x02, 0x72, 0x00, 0x52, 0x0c, 0x61,
	0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x10,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5c, 0x92, 0x41, 0x54, 0x32, 0x52, 0xe4, 0xba, 0xa4,
	0xe6, 0x98, 0x93, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0xe9, 0xa6, 0x96, 0xe6, 0xac, 0xa1, 0xe5,
	0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe7, 0xbb, 0x99, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xef, 0xbc, 0x8c, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0xe9, 0xa6, 0x96, 0xe6, 0xac, 0xa1, 0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81,
	0xe7, 0xbb, 0x99, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xfa,
	0x42, 0x02, 0x72, 0x00, 0x52, 0x10, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x78,
	0x76, 0x32, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe7, 0x9a, 0x84, 0xe8,
	0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0b, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x80, 0x03, 0x0a, 0x11, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1e, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0xe5, 0x8c, 0xba, 0xe5, 0x9d, 0x97, 0xe9, 0x93, 0xbe,
	0x69, 0x64, 0xfa, 0x42, 0x0b, 0x72, 0x09, 0x10, 0x01, 0x52, 0x01, 0x31, 0x52, 0x02, 0x35, 0x36,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x06, 0x72, 0x70,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x92, 0x41, 0x34, 0x32,
	0x32, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0x20, 0x2c, 0xe9,
	0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x75, 0x72, 0x6c, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x3a, 0x30,
	0xe4, 0xb8, 0xba, 0x43, 0xe7, 0xab, 0xaf, 0x2c, 0x75, 0x69, 0x6e, 0x74, 0xe4, 0xb8, 0xba, 0x42,
	0xe7, 0xab, 0xaf, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x52, 0x06, 0x72, 0x70,
	0x63, 0x5f, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x13, 0x32, 0x11,
	0xe7, 0x88, 0xb6, 0xe7, 0xba, 0xa7, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x20, 0x68, 0x61, 0x73,
	0x68, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x42, 0x18, 0x42, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x41, 0x0a, 0x0b, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41,
	0x13, 0x32, 0x11, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x20,
	0x68, 0x61, 0x73, 0x68, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x42, 0x18, 0x42, 0x52, 0x0b, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x4f, 0x0a, 0x08, 0x74, 0x78,
	0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74,
	0x78, 0x76, 0x32, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42, 0x22, 0x92,
	0x41, 0x17, 0x32, 0x15, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe7, 0x9a, 0x84, 0xe8, 0xaf, 0xa6,
	0xe7, 0xbb, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08,
	0x01, 0x52, 0x08, 0x74, 0x78, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa2, 0x02, 0x0a, 0x0d,
	0x54, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x78,
	0x76, 0x32, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0xe5,
	0x8c, 0xba, 0xe5, 0x9d, 0x97, 0xe9, 0x93, 0xbe, 0x69, 0x64, 0xfa, 0x42, 0x0b, 0x72, 0x09, 0x10,
	0x01, 0x52, 0x01, 0x31, 0x52, 0x02, 0x35, 0x36, 0x52, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe4, 0xba, 0xa4,
	0xe6, 0x98, 0x93, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92,
	0x41, 0x14, 0x32, 0x12, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x3e, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x12, 0x32, 0x10, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0x68, 0x61, 0x73, 0x68, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x18, 0x42, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x22, 0x45, 0x0a, 0x0e, 0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0xe5, 0x8c, 0xba, 0xe5, 0x9d,
	0x97, 0xe9, 0x93, 0xbe, 0x69, 0x64, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x0f, 0x54, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32,
	0x06, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe6, 0x80, 0xbb, 0xe6,
	0x95, 0xb0, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x66,
	0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x04, 0x66, 0x61,
	0x69, 0x6c, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x81, 0xa2, 0xe5, 0xa4, 0x8d, 0xe6,
	0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x06, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x22, 0xc1, 0x01,
	0x0a, 0x0e, 0x54, 0x78, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x33, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0xe5, 0x8c, 0xba, 0xe5, 0x9d, 0x97, 0xe9,
	0x93, 0xbe, 0x69, 0x64, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x32, 0x12,
	0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe4, 0xba,
	0xa4, 0xe6, 0x98, 0x93, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x3a, 0x0a, 0x0f, 0x54, 0x78, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x78, 0x76, 0x32, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x54, 0x72,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe5, 0x01,
	0x0a, 0x0b, 0x54, 0x78, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a,
	0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0xbb, 0x9f, 0xe8, 0xae, 0xa1, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe6, 0x95,
	0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a,
	0x04, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x04,
	0x66, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x81, 0xa2, 0xe5, 0xa4,
	0x8d, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x06, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x12,
	0x24, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0e,
	0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x5d, 0x0a, 0x13, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0x92, 0x41, 0x08,
	0x32, 0x06, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x23, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe6, 0x80, 0xbb, 0xe9, 0xa2, 0x9d, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x42, 0x0a, 0x13, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x72,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x78, 0x76, 0x32,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8c, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x0a,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0xbb, 0x9f, 0xe8, 0xae, 0xa1, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b,
	0x92, 0x41, 0x08, 0x32, 0x06, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe6, 0x80, 0xbb, 0xe9, 0xa2, 0x9d, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x44, 0x6f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0x92, 0x41, 0x14, 0x32, 0x12, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe5, 0xbc, 0x80, 0xe5, 0xa7,
	0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41,
	0x14, 0x32, 0x12, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x32, 0xe0, 0x08, 0x0a, 0x04, 0x54, 0x78, 0x76, 0x32, 0x12,
	0x6a, 0x0a, 0x09, 0x54, 0x6f, 0x42, 0x54, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x74,
	0x78, 0x76, 0x32, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x42, 0x54, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x78, 0x76, 0x32, 0x70, 0x62, 0x2e,
	0x54, 0x6f, 0x42, 0x54, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x28, 0x82, 0xf1, 0x04, 0x09, 0x0a, 0x07, 0x74, 0x6f, 0x42, 0x41, 0x75, 0x74, 0x68,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x32, 0x2f, 0x74, 0x78, 0x2f, 0x62, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x0d, 0x54,
	0x6f, 0x42, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x74,
	0x78, 0x76, 0x32, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x42, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x78, 0x76,
	0x32, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x42, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xf1, 0x04, 0x09, 0x0a,
	0x07, 0x74, 0x6f, 0x42, 0x41, 0x75, 0x74, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01,
	0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x2f, 0x62, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x0d, 0x54, 0x6f, 0x42, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1c, 0x2e, 0x74, 0x78, 0x76, 0x32, 0x70,
	0x62, 0x2e, 0x54, 0x6f, 0x42, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x78, 0x76, 0x32, 0x70, 0x62, 0x2e,
	0x54, 0x6f, 0x42, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xf1, 0x04, 0x09, 0x0a, 0x07, 0x74, 0x6f, 0x42,
	0x41, 0x75, 0x74, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x2f, 0x62, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x45, 0x0a, 0x0a, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x61, 0x76,
	0x65, 0x12, 0x19, 0x2e, 0x74, 0x78, 0x76, 0x32, 0x70, 0x62, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x74,
	0x78, 0x76, 0x32, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x0d, 0x92, 0xf1, 0x04,
	0x09, 0x0a, 0x07, 0x72, 0x70, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x5d, 0x0a, 0x06, 0x54, 0x78,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x74, 0x78, 0x76, 0x32, 0x70, 0x62, 0x2e, 0x54, 0x78,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x78,
	0x76, 0x32, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xf1, 0x04, 0x06, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x32, 0x2f, 0x74, 0x78, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x07, 0x54, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x74, 0x78, 0x76, 0x32, 0x70, 0x62, 0x2e, 0x54, 0x78,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74,
	0x78, 0x76, 0x32, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xf1, 0x04, 0x06, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x32, 0x2f, 0x74, 0x78, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x61, 0x0a, 0x07,
	0x54, 0x78, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x2e, 0x74, 0x78, 0x76, 0x32, 0x70, 0x62,
	0x2e, 0x54, 0x78, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x74, 0x78, 0x76, 0x32, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x54, 0x72, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xf1, 0x04, 0x06, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x78, 0x2f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x12,
	0x69, 0x0a, 0x0a, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e,
	0x74, 0x78, 0x76, 0x32, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x78, 0x76, 0x32, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x28, 0x82, 0xf1, 0x04, 0x06, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x6d, 0x0a, 0x0b, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x74, 0x78, 0x76, 0x32,
	0x70, 0x62, 0x2e, 0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x78, 0x76, 0x32, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29,
	0x82, 0xf1, 0x04, 0x06, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6d, 0x0a, 0x0b, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x2e, 0x74, 0x78, 0x76, 0x32, 0x70,
	0x62, 0x2e, 0x54, 0x78, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x74, 0x78, 0x76, 0x32, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82,
	0xf1, 0x04, 0x06, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a,
	0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x2f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x07, 0x44, 0x6f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x74, 0x78, 0x76, 0x32, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x74, 0x78,
	0x76, 0x32, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x0d, 0x92, 0xf1, 0x04, 0x09,
	0x0a, 0x07, 0x72, 0x70, 0x63, 0x41, 0x75, 0x74, 0x68, 0x42, 0x16, 0x92, 0x41, 0x06, 0x12, 0x04,
	0x32, 0x02, 0x76, 0x32, 0x5a, 0x0b, 0x2e, 0x2f, 0x70, 0x62, 0x2f, 0x74, 0x78, 0x76, 0x32, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v2_tx_v2_proto_rawDescOnce sync.Once
	file_v2_tx_v2_proto_rawDescData = file_v2_tx_v2_proto_rawDesc
)

func file_v2_tx_v2_proto_rawDescGZIP() []byte {
	file_v2_tx_v2_proto_rawDescOnce.Do(func() {
		file_v2_tx_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_v2_tx_v2_proto_rawDescData)
	})
	return file_v2_tx_v2_proto_rawDescData
}

var file_v2_tx_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_v2_tx_v2_proto_goTypes = []any{
	(*PageRequest)(nil),           // 0: txv2pb.PageRequest
	(*ToBRefundListRequest)(nil),  // 1: txv2pb.ToBRefundListRequest
	(*ToBRefundListResponse)(nil), // 2: txv2pb.ToBRefundListResponse
	(*ToBTxListRequest)(nil),      // 3: txv2pb.ToBTxListRequest
	(*ToBTxListResponse)(nil),     // 4: txv2pb.ToBTxListResponse
	(*TxListResponse)(nil),        // 5: txv2pb.TxListResponse
	(*TxResponse)(nil),            // 6: txv2pb.TxResponse
	(*RefundResponse)(nil),        // 7: txv2pb.RefundResponse
	(*RefundListResponse)(nil),    // 8: txv2pb.RefundListResponse
	(*ToBRefundViewRequest)(nil),  // 9: txv2pb.ToBRefundViewRequest
	(*ToBRefundViewResponse)(nil), // 10: txv2pb.ToBRefundViewResponse
	(*Empty)(nil),                 // 11: txv2pb.Empty
	(*RefundData)(nil),            // 12: txv2pb.RefundData
	(*TxsData)(nil),               // 13: txv2pb.TxsData
	(*BundleSaveRequest)(nil),     // 14: txv2pb.BundleSaveRequest
	(*TxListRequest)(nil),         // 15: txv2pb.TxListRequest
	(*TxCountRequest)(nil),        // 16: txv2pb.TxCountRequest
	(*TxCountResponse)(nil),       // 17: txv2pb.TxCountResponse
	(*TxTrendRequest)(nil),        // 18: txv2pb.TxTrendRequest
	(*TxTrendResponse)(nil),       // 19: txv2pb.TxTrendResponse
	(*TxTrendData)(nil),           // 20: txv2pb.TxTrendData
	(*RefundCountResponse)(nil),   // 21: txv2pb.RefundCountResponse
	(*RefundTrendResponse)(nil),   // 22: txv2pb.RefundTrendResponse
	(*RefundTrendData)(nil),       // 23: txv2pb.RefundTrendData
	(*DoCountRequest)(nil),        // 24: txv2pb.DoCountRequest
}
var file_v2_tx_v2_proto_depIdxs = []int32{
	0,  // 0: txv2pb.ToBRefundListRequest.page:type_name -> txv2pb.PageRequest
	7,  // 1: txv2pb.ToBRefundListResponse.data:type_name -> txv2pb.RefundResponse
	0,  // 2: txv2pb.ToBTxListRequest.page:type_name -> txv2pb.PageRequest
	6,  // 3: txv2pb.ToBTxListResponse.data:type_name -> txv2pb.TxResponse
	6,  // 4: txv2pb.TxListResponse.data:type_name -> txv2pb.TxResponse
	7,  // 5: txv2pb.RefundListResponse.data:type_name -> txv2pb.RefundResponse
	7,  // 6: txv2pb.ToBRefundViewResponse.data:type_name -> txv2pb.RefundResponse
	12, // 7: txv2pb.TxsData.refund_data:type_name -> txv2pb.RefundData
	13, // 8: txv2pb.BundleSaveRequest.txs_data:type_name -> txv2pb.TxsData
	0,  // 9: txv2pb.TxListRequest.page:type_name -> txv2pb.PageRequest
	20, // 10: txv2pb.TxTrendResponse.data:type_name -> txv2pb.TxTrendData
	23, // 11: txv2pb.RefundTrendResponse.data:type_name -> txv2pb.RefundTrendData
	3,  // 12: txv2pb.Txv2.ToBTxList:input_type -> txv2pb.ToBTxListRequest
	1,  // 13: txv2pb.Txv2.ToBRefundList:input_type -> txv2pb.ToBRefundListRequest
	9,  // 14: txv2pb.Txv2.ToBRefundView:input_type -> txv2pb.ToBRefundViewRequest
	14, // 15: txv2pb.Txv2.BundleSave:input_type -> txv2pb.BundleSaveRequest
	15, // 16: txv2pb.Txv2.TxList:input_type -> txv2pb.TxListRequest
	16, // 17: txv2pb.Txv2.TxCount:input_type -> txv2pb.TxCountRequest
	18, // 18: txv2pb.Txv2.TxTrend:input_type -> txv2pb.TxTrendRequest
	15, // 19: txv2pb.Txv2.RefundList:input_type -> txv2pb.TxListRequest
	16, // 20: txv2pb.Txv2.RefundCount:input_type -> txv2pb.TxCountRequest
	18, // 21: txv2pb.Txv2.RefundTrend:input_type -> txv2pb.TxTrendRequest
	24, // 22: txv2pb.Txv2.DoCount:input_type -> txv2pb.DoCountRequest
	4,  // 23: txv2pb.Txv2.ToBTxList:output_type -> txv2pb.ToBTxListResponse
	2,  // 24: txv2pb.Txv2.ToBRefundList:output_type -> txv2pb.ToBRefundListResponse
	10, // 25: txv2pb.Txv2.ToBRefundView:output_type -> txv2pb.ToBRefundViewResponse
	11, // 26: txv2pb.Txv2.BundleSave:output_type -> txv2pb.Empty
	5,  // 27: txv2pb.Txv2.TxList:output_type -> txv2pb.TxListResponse
	17, // 28: txv2pb.Txv2.TxCount:output_type -> txv2pb.TxCountResponse
	19, // 29: txv2pb.Txv2.TxTrend:output_type -> txv2pb.TxTrendResponse
	8,  // 30: txv2pb.Txv2.RefundList:output_type -> txv2pb.RefundListResponse
	21, // 31: txv2pb.Txv2.RefundCount:output_type -> txv2pb.RefundCountResponse
	22, // 32: txv2pb.Txv2.RefundTrend:output_type -> txv2pb.RefundTrendResponse
	11, // 33: txv2pb.Txv2.DoCount:output_type -> txv2pb.Empty
	23, // [23:34] is the sub-list for method output_type
	12, // [12:23] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_v2_tx_v2_proto_init() }
func file_v2_tx_v2_proto_init() {
	if File_v2_tx_v2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v2_tx_v2_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ToBRefundListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ToBRefundListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ToBTxListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ToBTxListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*TxListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*RefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RefundListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ToBRefundViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ToBRefundViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*RefundData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*TxsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*BundleSaveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*TxListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*TxCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*TxCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*TxTrendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*TxTrendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*TxTrendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*RefundCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*RefundTrendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*RefundTrendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_tx_v2_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*DoCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v2_tx_v2_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v2_tx_v2_proto_goTypes,
		DependencyIndexes: file_v2_tx_v2_proto_depIdxs,
		MessageInfos:      file_v2_tx_v2_proto_msgTypes,
	}.Build()
	File_v2_tx_v2_proto = out.File
	file_v2_tx_v2_proto_rawDesc = nil
	file_v2_tx_v2_proto_goTypes = nil
	file_v2_tx_v2_proto_depIdxs = nil
}
