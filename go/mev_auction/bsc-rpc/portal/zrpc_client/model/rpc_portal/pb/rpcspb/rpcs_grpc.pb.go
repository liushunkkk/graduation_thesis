// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: v1/rpcs.proto

package rpcspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Rpcs_RpcInfoUpdate_FullMethodName     = "/rpcspb.Rpcs/RpcInfoUpdate"
	Rpcs_GetRpcInfo_FullMethodName        = "/rpcspb.Rpcs/GetRpcInfo"
	Rpcs_GetAllRpcInfoList_FullMethodName = "/rpcspb.Rpcs/GetAllRpcInfoList"
)

// RpcsClient is the client API for Rpcs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcsClient interface {
	// RpcInfoUpdate Rpc设置
	RpcInfoUpdate(ctx context.Context, in *RpcInfoUpdateRequest, opts ...grpc.CallOption) (*Empty, error)
	// GetRpcInfo 获取Rpc设置
	GetRpcInfo(ctx context.Context, in *GetRpcInfoRequest, opts ...grpc.CallOption) (*GetRpcInfoResponse, error)
	// GetRpcInfoList 获取Rpc设置列表（All）
	GetAllRpcInfoList(ctx context.Context, in *GetAllRpcInfoListRequest, opts ...grpc.CallOption) (*GetRpcInfoListResponse, error)
}

type rpcsClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcsClient(cc grpc.ClientConnInterface) RpcsClient {
	return &rpcsClient{cc}
}

func (c *rpcsClient) RpcInfoUpdate(ctx context.Context, in *RpcInfoUpdateRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Rpcs_RpcInfoUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcsClient) GetRpcInfo(ctx context.Context, in *GetRpcInfoRequest, opts ...grpc.CallOption) (*GetRpcInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRpcInfoResponse)
	err := c.cc.Invoke(ctx, Rpcs_GetRpcInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcsClient) GetAllRpcInfoList(ctx context.Context, in *GetAllRpcInfoListRequest, opts ...grpc.CallOption) (*GetRpcInfoListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRpcInfoListResponse)
	err := c.cc.Invoke(ctx, Rpcs_GetAllRpcInfoList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcsServer is the server API for Rpcs service.
// All implementations must embed UnimplementedRpcsServer
// for forward compatibility.
type RpcsServer interface {
	// RpcInfoUpdate Rpc设置
	RpcInfoUpdate(context.Context, *RpcInfoUpdateRequest) (*Empty, error)
	// GetRpcInfo 获取Rpc设置
	GetRpcInfo(context.Context, *GetRpcInfoRequest) (*GetRpcInfoResponse, error)
	// GetRpcInfoList 获取Rpc设置列表（All）
	GetAllRpcInfoList(context.Context, *GetAllRpcInfoListRequest) (*GetRpcInfoListResponse, error)
	mustEmbedUnimplementedRpcsServer()
}

// UnimplementedRpcsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRpcsServer struct{}

func (UnimplementedRpcsServer) RpcInfoUpdate(context.Context, *RpcInfoUpdateRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcInfoUpdate not implemented")
}
func (UnimplementedRpcsServer) GetRpcInfo(context.Context, *GetRpcInfoRequest) (*GetRpcInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRpcInfo not implemented")
}
func (UnimplementedRpcsServer) GetAllRpcInfoList(context.Context, *GetAllRpcInfoListRequest) (*GetRpcInfoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRpcInfoList not implemented")
}
func (UnimplementedRpcsServer) mustEmbedUnimplementedRpcsServer() {}
func (UnimplementedRpcsServer) testEmbeddedByValue()              {}

// UnsafeRpcsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcsServer will
// result in compilation errors.
type UnsafeRpcsServer interface {
	mustEmbedUnimplementedRpcsServer()
}

func RegisterRpcsServer(s grpc.ServiceRegistrar, srv RpcsServer) {
	// If the following call pancis, it indicates UnimplementedRpcsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Rpcs_ServiceDesc, srv)
}

func _Rpcs_RpcInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcInfoUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcsServer).RpcInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpcs_RpcInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcsServer).RpcInfoUpdate(ctx, req.(*RpcInfoUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpcs_GetRpcInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRpcInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcsServer).GetRpcInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpcs_GetRpcInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcsServer).GetRpcInfo(ctx, req.(*GetRpcInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpcs_GetAllRpcInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRpcInfoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcsServer).GetAllRpcInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpcs_GetAllRpcInfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcsServer).GetAllRpcInfoList(ctx, req.(*GetAllRpcInfoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rpcs_ServiceDesc is the grpc.ServiceDesc for Rpcs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rpcs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcspb.Rpcs",
	HandlerType: (*RpcsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RpcInfoUpdate",
			Handler:    _Rpcs_RpcInfoUpdate_Handler,
		},
		{
			MethodName: "GetRpcInfo",
			Handler:    _Rpcs_GetRpcInfo_Handler,
		},
		{
			MethodName: "GetAllRpcInfoList",
			Handler:    _Rpcs_GetAllRpcInfoList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/rpcs.proto",
}
