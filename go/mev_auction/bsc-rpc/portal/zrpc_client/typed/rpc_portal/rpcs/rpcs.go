// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: rpcs.proto

package rpcs

import (
	"context"

	"github.com/ethereum/go-ethereum/portal/zrpc_client/model/rpc_portal/pb/rpcspb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Empty                    = rpcspb.Empty
	GetAllRpcInfoListRequest = rpcspb.GetAllRpcInfoListRequest
	GetRpcInfoListResponse   = rpcspb.GetRpcInfoListResponse
	GetRpcInfoRequest        = rpcspb.GetRpcInfoRequest
	GetRpcInfoResponse       = rpcspb.GetRpcInfoResponse
	RpcInfoUpdateRequest     = rpcspb.RpcInfoUpdateRequest

	Rpcs interface {
		// RpcInfoUpdate Rpc设置
		RpcInfoUpdate(ctx context.Context, in *RpcInfoUpdateRequest, opts ...grpc.CallOption) (*Empty, error)
		// GetRpcInfo 获取Rpc设置
		GetRpcInfo(ctx context.Context, in *GetRpcInfoRequest, opts ...grpc.CallOption) (*GetRpcInfoResponse, error)
		// GetRpcInfoList 获取Rpc设置列表（All）
		GetAllRpcInfoList(ctx context.Context, in *GetAllRpcInfoListRequest, opts ...grpc.CallOption) (*GetRpcInfoListResponse, error)
	}

	defaultRpcs struct {
		cli zrpc.Client
	}
)

func NewRpcs(cli zrpc.Client) Rpcs {
	return &defaultRpcs{
		cli: cli,
	}
}

// RpcInfoUpdate Rpc设置
func (m *defaultRpcs) RpcInfoUpdate(ctx context.Context, in *RpcInfoUpdateRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := rpcspb.NewRpcsClient(m.cli.Conn())
	return client.RpcInfoUpdate(ctx, in, opts...)
}

// GetRpcInfo 获取Rpc设置
func (m *defaultRpcs) GetRpcInfo(ctx context.Context, in *GetRpcInfoRequest, opts ...grpc.CallOption) (*GetRpcInfoResponse, error) {
	client := rpcspb.NewRpcsClient(m.cli.Conn())
	return client.GetRpcInfo(ctx, in, opts...)
}

// GetRpcInfoList 获取Rpc设置列表（All）
func (m *defaultRpcs) GetAllRpcInfoList(ctx context.Context, in *GetAllRpcInfoListRequest, opts ...grpc.CallOption) (*GetRpcInfoListResponse, error) {
	client := rpcspb.NewRpcsClient(m.cli.Conn())
	return client.GetAllRpcInfoList(ctx, in, opts...)
}
